// This file was generated by the OpenGL-CS code generating tool.
// https://bitbucket.org/holmak/opengl-cs
//
// GL versions included:
//   GL_VERSION_1_0
//   GL_VERSION_1_1
//   GL_VERSION_1_2
//   GL_VERSION_1_3
//   GL_VERSION_1_4
//   GL_VERSION_1_5
//   GL_VERSION_2_0
//   GL_VERSION_2_1
//   GL_VERSION_3_0
//   GL_VERSION_3_1
//   GL_VERSION_3_2
//   GL_VERSION_3_3
//
// GL extensions included:
//   GL_EXT_texture_compression_s3tc
//   GL_KHR_debug

using System;
using System.Runtime.InteropServices;
using System.Text;
using SDL2;

public static class GL
{
    public delegate void DebugCallback(
        GL.GLenum source,
        GL.GLenum type,
        uint id,
        GL.GLenum severity,
        int length,
        IntPtr message,
        IntPtr userParam);

    public enum AttribMask : uint
    {
        GL_DEPTH_BUFFER_BIT = 0x00000100,
        GL_STENCIL_BUFFER_BIT = 0x00000400,
        GL_COLOR_BUFFER_BIT = 0x00004000,
    }

    public enum ClearBufferMask : uint
    {
        GL_DEPTH_BUFFER_BIT = 0x00000100,
        GL_STENCIL_BUFFER_BIT = 0x00000400,
        GL_COLOR_BUFFER_BIT = 0x00004000,
    }

    public enum BufferStorageMask : uint
    {
        GL_MAP_READ_BIT = 0x00000001,
        GL_MAP_WRITE_BIT = 0x00000002,
    }

    public enum ContextFlagMask : uint
    {
        GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001,
        GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002,
    }

    public enum ContextProfileMask : uint
    {
        GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001,
        GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002,
    }

    public enum MapBufferAccessMask : uint
    {
        GL_MAP_READ_BIT = 0x00000001,
        GL_MAP_WRITE_BIT = 0x00000002,
        GL_MAP_INVALIDATE_RANGE_BIT = 0x00000004,
        GL_MAP_INVALIDATE_BUFFER_BIT = 0x00000008,
        GL_MAP_FLUSH_EXPLICIT_BIT = 0x00000010,
        GL_MAP_UNSYNCHRONIZED_BIT = 0x00000020,
    }

    public enum SyncObjectMask : uint
    {
        GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001,
    }

    public enum PathFontStyle : uint
    {
        GL_NONE = 0x00000000,
    }

    public enum SpecialNumbers : uint
    {
        GL_FALSE = 0x00000000,
        GL_NO_ERROR = 0x00000000,
        GL_ZERO = 0x00000000,
        GL_NONE = 0x00000000,
        GL_TRUE = 0x00000001,
        GL_ONE = 0x00000001,
    }

    public enum Boolean : uint
    {
        GL_FALSE = 0x00000000,
        GL_TRUE = 0x00000001,
    }

    public enum VertexShaderWriteMaskEXT : uint
    {
        GL_FALSE = 0x00000000,
        GL_TRUE = 0x00000001,
    }

    public enum ClampColorModeARB : uint
    {
        GL_FALSE = 0x00000000,
        GL_TRUE = 0x00000001,
        GL_FIXED_ONLY = 0x0000891D,
    }

    public enum GraphicsResetStatus : uint
    {
        GL_NO_ERROR = 0x00000000,
    }

    public enum ErrorCode : uint
    {
        GL_NO_ERROR = 0x00000000,
        GL_INVALID_ENUM = 0x00000500,
        GL_INVALID_VALUE = 0x00000501,
        GL_INVALID_OPERATION = 0x00000502,
        GL_STACK_OVERFLOW = 0x00000503,
        GL_STACK_UNDERFLOW = 0x00000504,
        GL_OUT_OF_MEMORY = 0x00000505,
        GL_INVALID_FRAMEBUFFER_OPERATION = 0x00000506,
    }

    public enum TextureSwizzle : uint
    {
        GL_ZERO = 0x00000000,
        GL_ONE = 0x00000001,
        GL_RED = 0x00001903,
        GL_GREEN = 0x00001904,
        GL_BLUE = 0x00001905,
        GL_ALPHA = 0x00001906,
    }

    public enum StencilOp : uint
    {
        GL_ZERO = 0x00000000,
        GL_INVERT = 0x0000150A,
        GL_KEEP = 0x00001E00,
        GL_REPLACE = 0x00001E01,
        GL_INCR = 0x00001E02,
        GL_DECR = 0x00001E03,
        GL_INCR_WRAP = 0x00008507,
        GL_DECR_WRAP = 0x00008508,
    }

    public enum BlendingFactor : uint
    {
        GL_ZERO = 0x00000000,
        GL_ONE = 0x00000001,
        GL_SRC_COLOR = 0x00000300,
        GL_ONE_MINUS_SRC_COLOR = 0x00000301,
        GL_SRC_ALPHA = 0x00000302,
        GL_ONE_MINUS_SRC_ALPHA = 0x00000303,
        GL_DST_ALPHA = 0x00000304,
        GL_ONE_MINUS_DST_ALPHA = 0x00000305,
        GL_DST_COLOR = 0x00000306,
        GL_ONE_MINUS_DST_COLOR = 0x00000307,
        GL_SRC_ALPHA_SATURATE = 0x00000308,
        GL_CONSTANT_COLOR = 0x00008001,
        GL_ONE_MINUS_CONSTANT_COLOR = 0x00008002,
        GL_CONSTANT_ALPHA = 0x00008003,
        GL_ONE_MINUS_CONSTANT_ALPHA = 0x00008004,
        GL_SRC1_ALPHA = 0x00008589,
        GL_SRC1_COLOR = 0x000088F9,
        GL_ONE_MINUS_SRC1_COLOR = 0x000088FA,
        GL_ONE_MINUS_SRC1_ALPHA = 0x000088FB,
    }

    public enum SyncBehaviorFlags : uint
    {
        GL_NONE = 0x00000000,
    }

    public enum TextureCompareMode : uint
    {
        GL_NONE = 0x00000000,
        GL_COMPARE_REF_TO_TEXTURE = 0x0000884E,
    }

    public enum PathColorFormat : uint
    {
        GL_NONE = 0x00000000,
        GL_ALPHA = 0x00001906,
        GL_RGB = 0x00001907,
        GL_RGBA = 0x00001908,
    }

    public enum CombinerBiasNV : uint
    {
        GL_NONE = 0x00000000,
    }

    public enum CombinerScaleNV : uint
    {
        GL_NONE = 0x00000000,
    }

    public enum DrawBufferMode : uint
    {
        GL_NONE = 0x00000000,
        GL_FRONT_LEFT = 0x00000400,
        GL_FRONT_RIGHT = 0x00000401,
        GL_BACK_LEFT = 0x00000402,
        GL_BACK_RIGHT = 0x00000403,
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_LEFT = 0x00000406,
        GL_RIGHT = 0x00000407,
        GL_FRONT_AND_BACK = 0x00000408,
        GL_COLOR_ATTACHMENT0 = 0x00008CE0,
        GL_COLOR_ATTACHMENT1 = 0x00008CE1,
        GL_COLOR_ATTACHMENT2 = 0x00008CE2,
        GL_COLOR_ATTACHMENT3 = 0x00008CE3,
        GL_COLOR_ATTACHMENT4 = 0x00008CE4,
        GL_COLOR_ATTACHMENT5 = 0x00008CE5,
        GL_COLOR_ATTACHMENT6 = 0x00008CE6,
        GL_COLOR_ATTACHMENT7 = 0x00008CE7,
        GL_COLOR_ATTACHMENT8 = 0x00008CE8,
        GL_COLOR_ATTACHMENT9 = 0x00008CE9,
        GL_COLOR_ATTACHMENT10 = 0x00008CEA,
        GL_COLOR_ATTACHMENT11 = 0x00008CEB,
        GL_COLOR_ATTACHMENT12 = 0x00008CEC,
        GL_COLOR_ATTACHMENT13 = 0x00008CED,
        GL_COLOR_ATTACHMENT14 = 0x00008CEE,
        GL_COLOR_ATTACHMENT15 = 0x00008CEF,
        GL_COLOR_ATTACHMENT16 = 0x00008CF0,
        GL_COLOR_ATTACHMENT17 = 0x00008CF1,
        GL_COLOR_ATTACHMENT18 = 0x00008CF2,
        GL_COLOR_ATTACHMENT19 = 0x00008CF3,
        GL_COLOR_ATTACHMENT20 = 0x00008CF4,
        GL_COLOR_ATTACHMENT21 = 0x00008CF5,
        GL_COLOR_ATTACHMENT22 = 0x00008CF6,
        GL_COLOR_ATTACHMENT23 = 0x00008CF7,
        GL_COLOR_ATTACHMENT24 = 0x00008CF8,
        GL_COLOR_ATTACHMENT25 = 0x00008CF9,
        GL_COLOR_ATTACHMENT26 = 0x00008CFA,
        GL_COLOR_ATTACHMENT27 = 0x00008CFB,
        GL_COLOR_ATTACHMENT28 = 0x00008CFC,
        GL_COLOR_ATTACHMENT29 = 0x00008CFD,
        GL_COLOR_ATTACHMENT30 = 0x00008CFE,
        GL_COLOR_ATTACHMENT31 = 0x00008CFF,
    }

    public enum PixelTexGenMode : uint
    {
        GL_NONE = 0x00000000,
        GL_RGB = 0x00001907,
        GL_RGBA = 0x00001908,
    }

    public enum ReadBufferMode : uint
    {
        GL_NONE = 0x00000000,
        GL_FRONT_LEFT = 0x00000400,
        GL_FRONT_RIGHT = 0x00000401,
        GL_BACK_LEFT = 0x00000402,
        GL_BACK_RIGHT = 0x00000403,
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_LEFT = 0x00000406,
        GL_RIGHT = 0x00000407,
        GL_COLOR_ATTACHMENT0 = 0x00008CE0,
        GL_COLOR_ATTACHMENT1 = 0x00008CE1,
        GL_COLOR_ATTACHMENT2 = 0x00008CE2,
        GL_COLOR_ATTACHMENT3 = 0x00008CE3,
        GL_COLOR_ATTACHMENT4 = 0x00008CE4,
        GL_COLOR_ATTACHMENT5 = 0x00008CE5,
        GL_COLOR_ATTACHMENT6 = 0x00008CE6,
        GL_COLOR_ATTACHMENT7 = 0x00008CE7,
        GL_COLOR_ATTACHMENT8 = 0x00008CE8,
        GL_COLOR_ATTACHMENT9 = 0x00008CE9,
        GL_COLOR_ATTACHMENT10 = 0x00008CEA,
        GL_COLOR_ATTACHMENT11 = 0x00008CEB,
        GL_COLOR_ATTACHMENT12 = 0x00008CEC,
        GL_COLOR_ATTACHMENT13 = 0x00008CED,
        GL_COLOR_ATTACHMENT14 = 0x00008CEE,
        GL_COLOR_ATTACHMENT15 = 0x00008CEF,
    }

    public enum ColorBuffer : uint
    {
        GL_NONE = 0x00000000,
        GL_FRONT_LEFT = 0x00000400,
        GL_FRONT_RIGHT = 0x00000401,
        GL_BACK_LEFT = 0x00000402,
        GL_BACK_RIGHT = 0x00000403,
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_LEFT = 0x00000406,
        GL_RIGHT = 0x00000407,
        GL_FRONT_AND_BACK = 0x00000408,
        GL_COLOR_ATTACHMENT0 = 0x00008CE0,
        GL_COLOR_ATTACHMENT1 = 0x00008CE1,
        GL_COLOR_ATTACHMENT2 = 0x00008CE2,
        GL_COLOR_ATTACHMENT3 = 0x00008CE3,
        GL_COLOR_ATTACHMENT4 = 0x00008CE4,
        GL_COLOR_ATTACHMENT5 = 0x00008CE5,
        GL_COLOR_ATTACHMENT6 = 0x00008CE6,
        GL_COLOR_ATTACHMENT7 = 0x00008CE7,
        GL_COLOR_ATTACHMENT8 = 0x00008CE8,
        GL_COLOR_ATTACHMENT9 = 0x00008CE9,
        GL_COLOR_ATTACHMENT10 = 0x00008CEA,
        GL_COLOR_ATTACHMENT11 = 0x00008CEB,
        GL_COLOR_ATTACHMENT12 = 0x00008CEC,
        GL_COLOR_ATTACHMENT13 = 0x00008CED,
        GL_COLOR_ATTACHMENT14 = 0x00008CEE,
        GL_COLOR_ATTACHMENT15 = 0x00008CEF,
        GL_COLOR_ATTACHMENT16 = 0x00008CF0,
        GL_COLOR_ATTACHMENT17 = 0x00008CF1,
        GL_COLOR_ATTACHMENT18 = 0x00008CF2,
        GL_COLOR_ATTACHMENT19 = 0x00008CF3,
        GL_COLOR_ATTACHMENT20 = 0x00008CF4,
        GL_COLOR_ATTACHMENT21 = 0x00008CF5,
        GL_COLOR_ATTACHMENT22 = 0x00008CF6,
        GL_COLOR_ATTACHMENT23 = 0x00008CF7,
        GL_COLOR_ATTACHMENT24 = 0x00008CF8,
        GL_COLOR_ATTACHMENT25 = 0x00008CF9,
        GL_COLOR_ATTACHMENT26 = 0x00008CFA,
        GL_COLOR_ATTACHMENT27 = 0x00008CFB,
        GL_COLOR_ATTACHMENT28 = 0x00008CFC,
        GL_COLOR_ATTACHMENT29 = 0x00008CFD,
        GL_COLOR_ATTACHMENT30 = 0x00008CFE,
        GL_COLOR_ATTACHMENT31 = 0x00008CFF,
    }

    public enum PathGenMode : uint
    {
        GL_NONE = 0x00000000,
    }

    public enum PathTransformType : uint
    {
        GL_NONE = 0x00000000,
    }

    public enum PrimitiveType : uint
    {
        GL_POINTS = 0x00000000,
        GL_LINES = 0x00000001,
        GL_LINE_LOOP = 0x00000002,
        GL_LINE_STRIP = 0x00000003,
        GL_TRIANGLES = 0x00000004,
        GL_TRIANGLE_STRIP = 0x00000005,
        GL_TRIANGLE_FAN = 0x00000006,
        GL_LINES_ADJACENCY = 0x0000000A,
        GL_LINE_STRIP_ADJACENCY = 0x0000000B,
        GL_TRIANGLES_ADJACENCY = 0x0000000C,
        GL_TRIANGLE_STRIP_ADJACENCY = 0x0000000D,
    }

    public enum TextureEnvMode : uint
    {
        GL_BLEND = 0x00000BE2,
    }

    public enum LightEnvModeSGIX : uint
    {
        GL_REPLACE = 0x00001E01,
    }

    public enum StencilFunction : uint
    {
        GL_NEVER = 0x00000200,
        GL_LESS = 0x00000201,
        GL_EQUAL = 0x00000202,
        GL_LEQUAL = 0x00000203,
        GL_GREATER = 0x00000204,
        GL_NOTEQUAL = 0x00000205,
        GL_GEQUAL = 0x00000206,
        GL_ALWAYS = 0x00000207,
    }

    public enum IndexFunctionEXT : uint
    {
        GL_NEVER = 0x00000200,
        GL_LESS = 0x00000201,
        GL_EQUAL = 0x00000202,
        GL_LEQUAL = 0x00000203,
        GL_GREATER = 0x00000204,
        GL_NOTEQUAL = 0x00000205,
        GL_GEQUAL = 0x00000206,
        GL_ALWAYS = 0x00000207,
    }

    public enum AlphaFunction : uint
    {
        GL_NEVER = 0x00000200,
        GL_LESS = 0x00000201,
        GL_EQUAL = 0x00000202,
        GL_LEQUAL = 0x00000203,
        GL_GREATER = 0x00000204,
        GL_NOTEQUAL = 0x00000205,
        GL_GEQUAL = 0x00000206,
        GL_ALWAYS = 0x00000207,
    }

    public enum DepthFunction : uint
    {
        GL_NEVER = 0x00000200,
        GL_LESS = 0x00000201,
        GL_EQUAL = 0x00000202,
        GL_LEQUAL = 0x00000203,
        GL_GREATER = 0x00000204,
        GL_NOTEQUAL = 0x00000205,
        GL_GEQUAL = 0x00000206,
        GL_ALWAYS = 0x00000207,
    }

    public enum ColorMaterialFace : uint
    {
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_FRONT_AND_BACK = 0x00000408,
    }

    public enum CullFaceMode : uint
    {
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_FRONT_AND_BACK = 0x00000408,
    }

    public enum StencilFaceDirection : uint
    {
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_FRONT_AND_BACK = 0x00000408,
    }

    public enum MaterialFace : uint
    {
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_FRONT_AND_BACK = 0x00000408,
    }

    public enum FogMode : uint
    {
        GL_LINEAR = 0x00002601,
    }

    public enum FrontFaceDirection : uint
    {
        GL_CW = 0x00000900,
        GL_CCW = 0x00000901,
    }

    public enum GetPName : uint
    {
        GL_POINT_SIZE = 0x00000B11,
        GL_POINT_SIZE_RANGE = 0x00000B12,
        GL_SMOOTH_POINT_SIZE_RANGE = 0x00000B12,
        GL_POINT_SIZE_GRANULARITY = 0x00000B13,
        GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x00000B13,
        GL_LINE_SMOOTH = 0x00000B20,
        GL_LINE_WIDTH = 0x00000B21,
        GL_LINE_WIDTH_RANGE = 0x00000B22,
        GL_SMOOTH_LINE_WIDTH_RANGE = 0x00000B22,
        GL_LINE_WIDTH_GRANULARITY = 0x00000B23,
        GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x00000B23,
        GL_POLYGON_MODE = 0x00000B40,
        GL_POLYGON_SMOOTH = 0x00000B41,
        GL_CULL_FACE = 0x00000B44,
        GL_CULL_FACE_MODE = 0x00000B45,
        GL_FRONT_FACE = 0x00000B46,
        GL_DEPTH_RANGE = 0x00000B70,
        GL_DEPTH_TEST = 0x00000B71,
        GL_DEPTH_WRITEMASK = 0x00000B72,
        GL_DEPTH_CLEAR_VALUE = 0x00000B73,
        GL_DEPTH_FUNC = 0x00000B74,
        GL_STENCIL_TEST = 0x00000B90,
        GL_STENCIL_CLEAR_VALUE = 0x00000B91,
        GL_STENCIL_FUNC = 0x00000B92,
        GL_STENCIL_VALUE_MASK = 0x00000B93,
        GL_STENCIL_FAIL = 0x00000B94,
        GL_STENCIL_PASS_DEPTH_FAIL = 0x00000B95,
        GL_STENCIL_PASS_DEPTH_PASS = 0x00000B96,
        GL_STENCIL_REF = 0x00000B97,
        GL_STENCIL_WRITEMASK = 0x00000B98,
        GL_VIEWPORT = 0x00000BA2,
        GL_DITHER = 0x00000BD0,
        GL_BLEND_DST = 0x00000BE0,
        GL_BLEND_SRC = 0x00000BE1,
        GL_BLEND = 0x00000BE2,
        GL_LOGIC_OP_MODE = 0x00000BF0,
        GL_COLOR_LOGIC_OP = 0x00000BF2,
        GL_DRAW_BUFFER = 0x00000C01,
        GL_READ_BUFFER = 0x00000C02,
        GL_SCISSOR_BOX = 0x00000C10,
        GL_SCISSOR_TEST = 0x00000C11,
        GL_COLOR_CLEAR_VALUE = 0x00000C22,
        GL_COLOR_WRITEMASK = 0x00000C23,
        GL_DOUBLEBUFFER = 0x00000C32,
        GL_STEREO = 0x00000C33,
        GL_LINE_SMOOTH_HINT = 0x00000C52,
        GL_POLYGON_SMOOTH_HINT = 0x00000C53,
        GL_UNPACK_SWAP_BYTES = 0x00000CF0,
        GL_UNPACK_LSB_FIRST = 0x00000CF1,
        GL_UNPACK_ROW_LENGTH = 0x00000CF2,
        GL_UNPACK_SKIP_ROWS = 0x00000CF3,
        GL_UNPACK_SKIP_PIXELS = 0x00000CF4,
        GL_UNPACK_ALIGNMENT = 0x00000CF5,
        GL_PACK_SWAP_BYTES = 0x00000D00,
        GL_PACK_LSB_FIRST = 0x00000D01,
        GL_PACK_ROW_LENGTH = 0x00000D02,
        GL_PACK_SKIP_ROWS = 0x00000D03,
        GL_PACK_SKIP_PIXELS = 0x00000D04,
        GL_PACK_ALIGNMENT = 0x00000D05,
        GL_MAX_CLIP_DISTANCES = 0x00000D32,
        GL_MAX_TEXTURE_SIZE = 0x00000D33,
        GL_MAX_VIEWPORT_DIMS = 0x00000D3A,
        GL_SUBPIXEL_BITS = 0x00000D50,
        GL_TEXTURE_1D = 0x00000DE0,
        GL_TEXTURE_2D = 0x00000DE1,
        GL_POLYGON_OFFSET_UNITS = 0x00002A00,
        GL_POLYGON_OFFSET_POINT = 0x00002A01,
        GL_POLYGON_OFFSET_LINE = 0x00002A02,
        GL_BLEND_COLOR = 0x00008005,
        GL_BLEND_EQUATION_RGB = 0x00008009,
        GL_POLYGON_OFFSET_FILL = 0x00008037,
        GL_POLYGON_OFFSET_FACTOR = 0x00008038,
        GL_TEXTURE_BINDING_1D = 0x00008068,
        GL_TEXTURE_BINDING_2D = 0x00008069,
        GL_TEXTURE_BINDING_3D = 0x0000806A,
        GL_PACK_SKIP_IMAGES = 0x0000806B,
        GL_PACK_IMAGE_HEIGHT = 0x0000806C,
        GL_UNPACK_SKIP_IMAGES = 0x0000806D,
        GL_UNPACK_IMAGE_HEIGHT = 0x0000806E,
        GL_MAX_3D_TEXTURE_SIZE = 0x00008073,
        GL_VERTEX_ARRAY = 0x00008074,
        GL_SAMPLE_BUFFERS = 0x000080A8,
        GL_SAMPLES = 0x000080A9,
        GL_SAMPLE_COVERAGE_VALUE = 0x000080AA,
        GL_SAMPLE_COVERAGE_INVERT = 0x000080AB,
        GL_BLEND_DST_RGB = 0x000080C8,
        GL_BLEND_SRC_RGB = 0x000080C9,
        GL_BLEND_DST_ALPHA = 0x000080CA,
        GL_BLEND_SRC_ALPHA = 0x000080CB,
        GL_MAX_ELEMENTS_VERTICES = 0x000080E8,
        GL_MAX_ELEMENTS_INDICES = 0x000080E9,
        GL_POINT_FADE_THRESHOLD_SIZE = 0x00008128,
        GL_MAJOR_VERSION = 0x0000821B,
        GL_MINOR_VERSION = 0x0000821C,
        GL_NUM_EXTENSIONS = 0x0000821D,
        GL_CONTEXT_FLAGS = 0x0000821E,
        GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x0000826C,
        GL_DEBUG_GROUP_STACK_DEPTH = 0x0000826D,
        GL_MAX_LABEL_LENGTH = 0x000082E8,
        GL_ALIASED_LINE_WIDTH_RANGE = 0x0000846E,
        GL_ACTIVE_TEXTURE = 0x000084E0,
        GL_MAX_RENDERBUFFER_SIZE = 0x000084E8,
        GL_TEXTURE_COMPRESSION_HINT = 0x000084EF,
        GL_TEXTURE_BINDING_RECTANGLE = 0x000084F6,
        GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x000084F8,
        GL_MAX_TEXTURE_LOD_BIAS = 0x000084FD,
        GL_TEXTURE_BINDING_CUBE_MAP = 0x00008514,
        GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x0000851C,
        GL_VERTEX_ARRAY_BINDING = 0x000085B5,
        GL_PROGRAM_POINT_SIZE = 0x00008642,
        GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x000086A2,
        GL_COMPRESSED_TEXTURE_FORMATS = 0x000086A3,
        GL_STENCIL_BACK_FUNC = 0x00008800,
        GL_STENCIL_BACK_FAIL = 0x00008801,
        GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x00008802,
        GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x00008803,
        GL_MAX_DRAW_BUFFERS = 0x00008824,
        GL_BLEND_EQUATION_ALPHA = 0x0000883D,
        GL_MAX_VERTEX_ATTRIBS = 0x00008869,
        GL_MAX_TEXTURE_IMAGE_UNITS = 0x00008872,
        GL_ARRAY_BUFFER_BINDING = 0x00008894,
        GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x00008895,
        GL_PIXEL_PACK_BUFFER_BINDING = 0x000088ED,
        GL_PIXEL_UNPACK_BUFFER_BINDING = 0x000088EF,
        GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x000088FC,
        GL_MAX_ARRAY_TEXTURE_LAYERS = 0x000088FF,
        GL_MIN_PROGRAM_TEXEL_OFFSET = 0x00008904,
        GL_MAX_PROGRAM_TEXEL_OFFSET = 0x00008905,
        GL_SAMPLER_BINDING = 0x00008919,
        GL_UNIFORM_BUFFER_BINDING = 0x00008A28,
        GL_UNIFORM_BUFFER_START = 0x00008A29,
        GL_UNIFORM_BUFFER_SIZE = 0x00008A2A,
        GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x00008A2B,
        GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x00008A2C,
        GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x00008A2D,
        GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x00008A2E,
        GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x00008A2F,
        GL_MAX_UNIFORM_BLOCK_SIZE = 0x00008A30,
        GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x00008A31,
        GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x00008A32,
        GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x00008A33,
        GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x00008A34,
        GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x00008B49,
        GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x00008B4A,
        GL_MAX_VARYING_FLOATS = 0x00008B4B,
        GL_MAX_VARYING_COMPONENTS = 0x00008B4B,
        GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x00008B4C,
        GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x00008B4D,
        GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x00008B8B,
        GL_CURRENT_PROGRAM = 0x00008B8D,
        GL_TEXTURE_BINDING_1D_ARRAY = 0x00008C1C,
        GL_TEXTURE_BINDING_2D_ARRAY = 0x00008C1D,
        GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x00008C29,
        GL_MAX_TEXTURE_BUFFER_SIZE = 0x00008C2B,
        GL_TEXTURE_BINDING_BUFFER = 0x00008C2C,
        GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x00008C84,
        GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x00008C85,
        GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x00008C8F,
        GL_STENCIL_BACK_REF = 0x00008CA3,
        GL_STENCIL_BACK_VALUE_MASK = 0x00008CA4,
        GL_STENCIL_BACK_WRITEMASK = 0x00008CA5,
        GL_DRAW_FRAMEBUFFER_BINDING = 0x00008CA6,
        GL_RENDERBUFFER_BINDING = 0x00008CA7,
        GL_READ_FRAMEBUFFER_BINDING = 0x00008CAA,
        GL_MAX_COLOR_ATTACHMENTS = 0x00008CDF,
        GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x00008DDF,
        GL_TIMESTAMP = 0x00008E28,
        GL_PROVOKING_VERTEX = 0x00008E4F,
        GL_MAX_SAMPLE_MASK_WORDS = 0x00008E59,
        GL_PRIMITIVE_RESTART_INDEX = 0x00008F9E,
        GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x00009104,
        GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105,
        GL_MAX_COLOR_TEXTURE_SAMPLES = 0x0000910E,
        GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x0000910F,
        GL_MAX_INTEGER_SAMPLES = 0x00009110,
        GL_MAX_SERVER_WAIT_TIMEOUT = 0x00009111,
        GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x00009122,
        GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x00009123,
        GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x00009124,
        GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x00009125,
        GL_CONTEXT_PROFILE_MASK = 0x00009126,
    }

    public enum EnableCap : uint
    {
        GL_LINE_SMOOTH = 0x00000B20,
        GL_POLYGON_SMOOTH = 0x00000B41,
        GL_CULL_FACE = 0x00000B44,
        GL_DEPTH_TEST = 0x00000B71,
        GL_STENCIL_TEST = 0x00000B90,
        GL_DITHER = 0x00000BD0,
        GL_BLEND = 0x00000BE2,
        GL_COLOR_LOGIC_OP = 0x00000BF2,
        GL_SCISSOR_TEST = 0x00000C11,
        GL_TEXTURE_1D = 0x00000DE0,
        GL_TEXTURE_2D = 0x00000DE1,
        GL_POLYGON_OFFSET_POINT = 0x00002A01,
        GL_POLYGON_OFFSET_LINE = 0x00002A02,
        GL_CLIP_DISTANCE0 = 0x00003000,
        GL_CLIP_DISTANCE1 = 0x00003001,
        GL_CLIP_DISTANCE2 = 0x00003002,
        GL_CLIP_DISTANCE3 = 0x00003003,
        GL_CLIP_DISTANCE4 = 0x00003004,
        GL_CLIP_DISTANCE5 = 0x00003005,
        GL_CLIP_DISTANCE6 = 0x00003006,
        GL_CLIP_DISTANCE7 = 0x00003007,
        GL_POLYGON_OFFSET_FILL = 0x00008037,
        GL_VERTEX_ARRAY = 0x00008074,
        GL_MULTISAMPLE = 0x0000809D,
        GL_SAMPLE_ALPHA_TO_COVERAGE = 0x0000809E,
        GL_SAMPLE_ALPHA_TO_ONE = 0x0000809F,
        GL_SAMPLE_COVERAGE = 0x000080A0,
        GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x00008242,
        GL_TEXTURE_RECTANGLE = 0x000084F5,
        GL_TEXTURE_CUBE_MAP = 0x00008513,
        GL_PROGRAM_POINT_SIZE = 0x00008642,
        GL_DEPTH_CLAMP = 0x0000864F,
        GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x0000884F,
        GL_RASTERIZER_DISCARD = 0x00008C89,
        GL_FRAMEBUFFER_SRGB = 0x00008DB9,
        GL_SAMPLE_MASK = 0x00008E51,
        GL_PRIMITIVE_RESTART = 0x00008F9D,
        GL_DEBUG_OUTPUT = 0x000092E0,
    }

    public enum GetFramebufferParameter : uint
    {
        GL_DOUBLEBUFFER = 0x00000C32,
        GL_STEREO = 0x00000C33,
        GL_SAMPLE_BUFFERS = 0x000080A8,
        GL_SAMPLES = 0x000080A9,
    }

    public enum HintTarget : uint
    {
        GL_LINE_SMOOTH_HINT = 0x00000C52,
        GL_POLYGON_SMOOTH_HINT = 0x00000C53,
        GL_TEXTURE_COMPRESSION_HINT = 0x000084EF,
        GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x00008B8B,
    }

    public enum PixelStoreParameter : uint
    {
        GL_UNPACK_SWAP_BYTES = 0x00000CF0,
        GL_UNPACK_LSB_FIRST = 0x00000CF1,
        GL_UNPACK_ROW_LENGTH = 0x00000CF2,
        GL_UNPACK_SKIP_ROWS = 0x00000CF3,
        GL_UNPACK_SKIP_PIXELS = 0x00000CF4,
        GL_UNPACK_ALIGNMENT = 0x00000CF5,
        GL_PACK_SWAP_BYTES = 0x00000D00,
        GL_PACK_LSB_FIRST = 0x00000D01,
        GL_PACK_ROW_LENGTH = 0x00000D02,
        GL_PACK_SKIP_ROWS = 0x00000D03,
        GL_PACK_SKIP_PIXELS = 0x00000D04,
        GL_PACK_ALIGNMENT = 0x00000D05,
        GL_PACK_SKIP_IMAGES = 0x0000806B,
        GL_PACK_IMAGE_HEIGHT = 0x0000806C,
        GL_UNPACK_SKIP_IMAGES = 0x0000806D,
        GL_UNPACK_IMAGE_HEIGHT = 0x0000806E,
    }

    public enum CopyImageSubDataTarget : uint
    {
        GL_TEXTURE_1D = 0x00000DE0,
        GL_TEXTURE_2D = 0x00000DE1,
        GL_TEXTURE_3D = 0x0000806F,
        GL_TEXTURE_RECTANGLE = 0x000084F5,
        GL_TEXTURE_CUBE_MAP = 0x00008513,
        GL_TEXTURE_1D_ARRAY = 0x00008C18,
        GL_TEXTURE_2D_ARRAY = 0x00008C1A,
        GL_RENDERBUFFER = 0x00008D41,
        GL_TEXTURE_2D_MULTISAMPLE = 0x00009100,
        GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102,
    }

    public enum TextureTarget : uint
    {
        GL_TEXTURE_1D = 0x00000DE0,
        GL_TEXTURE_2D = 0x00000DE1,
        GL_PROXY_TEXTURE_1D = 0x00008063,
        GL_PROXY_TEXTURE_2D = 0x00008064,
        GL_TEXTURE_3D = 0x0000806F,
        GL_PROXY_TEXTURE_3D = 0x00008070,
        GL_TEXTURE_RECTANGLE = 0x000084F5,
        GL_PROXY_TEXTURE_RECTANGLE = 0x000084F7,
        GL_TEXTURE_CUBE_MAP = 0x00008513,
        GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x00008515,
        GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x00008516,
        GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x00008517,
        GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x00008518,
        GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x00008519,
        GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x0000851A,
        GL_PROXY_TEXTURE_CUBE_MAP = 0x0000851B,
        GL_TEXTURE_1D_ARRAY = 0x00008C18,
        GL_PROXY_TEXTURE_1D_ARRAY = 0x00008C19,
        GL_TEXTURE_2D_ARRAY = 0x00008C1A,
        GL_PROXY_TEXTURE_2D_ARRAY = 0x00008C1B,
        GL_TEXTURE_BUFFER = 0x00008C2A,
        GL_RENDERBUFFER = 0x00008D41,
        GL_TEXTURE_2D_MULTISAMPLE = 0x00009100,
        GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x00009101,
        GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102,
        GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009103,
    }

    public enum GetPointervPName : uint
    {
        GL_DEBUG_CALLBACK_FUNCTION = 0x00008244,
        GL_DEBUG_CALLBACK_USER_PARAM = 0x00008245,
    }

    public enum TextureParameterName : uint
    {
        GL_TEXTURE_WIDTH = 0x00001000,
        GL_TEXTURE_HEIGHT = 0x00001001,
        GL_TEXTURE_INTERNAL_FORMAT = 0x00001003,
        GL_TEXTURE_BORDER_COLOR = 0x00001004,
        GL_TEXTURE_MAG_FILTER = 0x00002800,
        GL_TEXTURE_MIN_FILTER = 0x00002801,
        GL_TEXTURE_WRAP_S = 0x00002802,
        GL_TEXTURE_WRAP_T = 0x00002803,
        GL_TEXTURE_RED_SIZE = 0x0000805C,
        GL_TEXTURE_GREEN_SIZE = 0x0000805D,
        GL_TEXTURE_BLUE_SIZE = 0x0000805E,
        GL_TEXTURE_ALPHA_SIZE = 0x0000805F,
        GL_TEXTURE_WRAP_R = 0x00008072,
        GL_TEXTURE_MIN_LOD = 0x0000813A,
        GL_TEXTURE_MAX_LOD = 0x0000813B,
        GL_TEXTURE_BASE_LEVEL = 0x0000813C,
        GL_TEXTURE_MAX_LEVEL = 0x0000813D,
        GL_TEXTURE_LOD_BIAS = 0x00008501,
        GL_TEXTURE_COMPARE_MODE = 0x0000884C,
        GL_TEXTURE_COMPARE_FUNC = 0x0000884D,
        GL_TEXTURE_SWIZZLE_R = 0x00008E42,
        GL_TEXTURE_SWIZZLE_G = 0x00008E43,
        GL_TEXTURE_SWIZZLE_B = 0x00008E44,
        GL_TEXTURE_SWIZZLE_A = 0x00008E45,
        GL_TEXTURE_SWIZZLE_RGBA = 0x00008E46,
    }

    public enum GetTextureParameter : uint
    {
        GL_TEXTURE_WIDTH = 0x00001000,
        GL_TEXTURE_HEIGHT = 0x00001001,
        GL_TEXTURE_INTERNAL_FORMAT = 0x00001003,
        GL_TEXTURE_BORDER_COLOR = 0x00001004,
        GL_TEXTURE_MAG_FILTER = 0x00002800,
        GL_TEXTURE_MIN_FILTER = 0x00002801,
        GL_TEXTURE_WRAP_S = 0x00002802,
        GL_TEXTURE_WRAP_T = 0x00002803,
        GL_TEXTURE_RED_SIZE = 0x0000805C,
        GL_TEXTURE_GREEN_SIZE = 0x0000805D,
        GL_TEXTURE_BLUE_SIZE = 0x0000805E,
        GL_TEXTURE_ALPHA_SIZE = 0x0000805F,
    }

    public enum SamplerParameterF : uint
    {
        GL_TEXTURE_BORDER_COLOR = 0x00001004,
        GL_TEXTURE_MIN_LOD = 0x0000813A,
        GL_TEXTURE_MAX_LOD = 0x0000813B,
        GL_TEXTURE_LOD_BIAS = 0x00008501,
    }

    public enum DebugSeverity : uint
    {
        GL_DONT_CARE = 0x00001100,
        GL_DEBUG_SEVERITY_NOTIFICATION = 0x0000826B,
        GL_DEBUG_SEVERITY_HIGH = 0x00009146,
        GL_DEBUG_SEVERITY_MEDIUM = 0x00009147,
        GL_DEBUG_SEVERITY_LOW = 0x00009148,
    }

    public enum HintMode : uint
    {
        GL_DONT_CARE = 0x00001100,
        GL_FASTEST = 0x00001101,
        GL_NICEST = 0x00001102,
    }

    public enum DebugSource : uint
    {
        GL_DONT_CARE = 0x00001100,
        GL_DEBUG_SOURCE_API = 0x00008246,
        GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x00008247,
        GL_DEBUG_SOURCE_SHADER_COMPILER = 0x00008248,
        GL_DEBUG_SOURCE_THIRD_PARTY = 0x00008249,
        GL_DEBUG_SOURCE_APPLICATION = 0x0000824A,
        GL_DEBUG_SOURCE_OTHER = 0x0000824B,
    }

    public enum DebugType : uint
    {
        GL_DONT_CARE = 0x00001100,
        GL_DEBUG_TYPE_ERROR = 0x0000824C,
        GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x0000824D,
        GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x0000824E,
        GL_DEBUG_TYPE_PORTABILITY = 0x0000824F,
        GL_DEBUG_TYPE_PERFORMANCE = 0x00008250,
        GL_DEBUG_TYPE_OTHER = 0x00008251,
        GL_DEBUG_TYPE_MARKER = 0x00008268,
        GL_DEBUG_TYPE_PUSH_GROUP = 0x00008269,
        GL_DEBUG_TYPE_POP_GROUP = 0x0000826A,
    }

    public enum VertexAttribIType : uint
    {
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_SHORT = 0x00001402,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
    }

    public enum WeightPointerTypeARB : uint
    {
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_SHORT = 0x00001402,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum TangentPointerTypeEXT : uint
    {
        GL_BYTE = 0x00001400,
        GL_SHORT = 0x00001402,
        GL_INT = 0x00001404,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum BinormalPointerTypeEXT : uint
    {
        GL_BYTE = 0x00001400,
        GL_SHORT = 0x00001402,
        GL_INT = 0x00001404,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum ColorPointerType : uint
    {
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_UNSIGNED_INT = 0x00001405,
    }

    public enum ListNameType : uint
    {
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_SHORT = 0x00001402,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
    }

    public enum NormalPointerType : uint
    {
        GL_BYTE = 0x00001400,
        GL_SHORT = 0x00001402,
        GL_INT = 0x00001404,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum PixelType : uint
    {
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_SHORT = 0x00001402,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_UNSIGNED_BYTE_3_3_2 = 0x00008032,
        GL_UNSIGNED_SHORT_4_4_4_4 = 0x00008033,
        GL_UNSIGNED_SHORT_5_5_5_1 = 0x00008034,
        GL_UNSIGNED_INT_8_8_8_8 = 0x00008035,
        GL_UNSIGNED_INT_10_10_10_2 = 0x00008036,
        GL_UNSIGNED_BYTE_2_3_3_REV = 0x00008362,
        GL_UNSIGNED_SHORT_5_6_5 = 0x00008363,
        GL_UNSIGNED_SHORT_5_6_5_REV = 0x00008364,
        GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x00008365,
        GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x00008366,
        GL_UNSIGNED_INT_8_8_8_8_REV = 0x00008367,
        GL_UNSIGNED_INT_2_10_10_10_REV = 0x00008368,
    }

    public enum VertexAttribType : uint
    {
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_SHORT = 0x00001402,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
        GL_HALF_FLOAT = 0x0000140B,
        GL_UNSIGNED_INT_2_10_10_10_REV = 0x00008368,
        GL_UNSIGNED_INT_10F_11F_11F_REV = 0x00008C3B,
        GL_INT_2_10_10_10_REV = 0x00008D9F,
    }

    public enum VertexAttribPointerType : uint
    {
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_SHORT = 0x00001402,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
        GL_HALF_FLOAT = 0x0000140B,
        GL_UNSIGNED_INT_2_10_10_10_REV = 0x00008368,
        GL_UNSIGNED_INT_10F_11F_11F_REV = 0x00008C3B,
        GL_INT_2_10_10_10_REV = 0x00008D9F,
    }

    public enum ScalarType : uint
    {
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_UNSIGNED_INT = 0x00001405,
    }

    public enum ReplacementCodeTypeSUN : uint
    {
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_UNSIGNED_INT = 0x00001405,
    }

    public enum ElementPointerTypeATI : uint
    {
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_UNSIGNED_INT = 0x00001405,
    }

    public enum MatrixIndexPointerTypeARB : uint
    {
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_UNSIGNED_INT = 0x00001405,
    }

    public enum DrawElementsType : uint
    {
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_UNSIGNED_INT = 0x00001405,
    }

    public enum SecondaryColorPointerTypeIBM : uint
    {
        GL_SHORT = 0x00001402,
        GL_INT = 0x00001404,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum IndexPointerType : uint
    {
        GL_SHORT = 0x00001402,
        GL_INT = 0x00001404,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum TexCoordPointerType : uint
    {
        GL_SHORT = 0x00001402,
        GL_INT = 0x00001404,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum VertexPointerType : uint
    {
        GL_SHORT = 0x00001402,
        GL_INT = 0x00001404,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum PixelFormat : uint
    {
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_UNSIGNED_INT = 0x00001405,
        GL_STENCIL_INDEX = 0x00001901,
        GL_DEPTH_COMPONENT = 0x00001902,
        GL_RED = 0x00001903,
        GL_GREEN = 0x00001904,
        GL_BLUE = 0x00001905,
        GL_ALPHA = 0x00001906,
        GL_RGB = 0x00001907,
        GL_RGBA = 0x00001908,
        GL_BGR = 0x000080E0,
        GL_BGRA = 0x000080E1,
        GL_RG = 0x00008227,
        GL_RG_INTEGER = 0x00008228,
        GL_DEPTH_STENCIL = 0x000084F9,
        GL_RED_INTEGER = 0x00008D94,
        GL_GREEN_INTEGER = 0x00008D95,
        GL_BLUE_INTEGER = 0x00008D96,
        GL_RGB_INTEGER = 0x00008D98,
        GL_RGBA_INTEGER = 0x00008D99,
        GL_BGR_INTEGER = 0x00008D9A,
        GL_BGRA_INTEGER = 0x00008D9B,
    }

    public enum AttributeType : uint
    {
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
        GL_FLOAT_VEC2 = 0x00008B50,
        GL_FLOAT_VEC3 = 0x00008B51,
        GL_FLOAT_VEC4 = 0x00008B52,
        GL_INT_VEC2 = 0x00008B53,
        GL_INT_VEC3 = 0x00008B54,
        GL_INT_VEC4 = 0x00008B55,
        GL_BOOL = 0x00008B56,
        GL_BOOL_VEC2 = 0x00008B57,
        GL_BOOL_VEC3 = 0x00008B58,
        GL_BOOL_VEC4 = 0x00008B59,
        GL_FLOAT_MAT2 = 0x00008B5A,
        GL_FLOAT_MAT3 = 0x00008B5B,
        GL_FLOAT_MAT4 = 0x00008B5C,
        GL_SAMPLER_1D = 0x00008B5D,
        GL_SAMPLER_2D = 0x00008B5E,
        GL_SAMPLER_3D = 0x00008B5F,
        GL_SAMPLER_CUBE = 0x00008B60,
        GL_SAMPLER_1D_SHADOW = 0x00008B61,
        GL_SAMPLER_2D_SHADOW = 0x00008B62,
        GL_SAMPLER_2D_RECT = 0x00008B63,
        GL_SAMPLER_2D_RECT_SHADOW = 0x00008B64,
        GL_FLOAT_MAT2x3 = 0x00008B65,
        GL_FLOAT_MAT2x4 = 0x00008B66,
        GL_FLOAT_MAT3x2 = 0x00008B67,
        GL_FLOAT_MAT3x4 = 0x00008B68,
        GL_FLOAT_MAT4x2 = 0x00008B69,
        GL_FLOAT_MAT4x3 = 0x00008B6A,
        GL_SAMPLER_BUFFER = 0x00008DC2,
        GL_SAMPLER_1D_ARRAY_SHADOW = 0x00008DC3,
        GL_SAMPLER_2D_ARRAY_SHADOW = 0x00008DC4,
        GL_SAMPLER_CUBE_SHADOW = 0x00008DC5,
        GL_UNSIGNED_INT_VEC2 = 0x00008DC6,
        GL_UNSIGNED_INT_VEC3 = 0x00008DC7,
        GL_UNSIGNED_INT_VEC4 = 0x00008DC8,
        GL_INT_SAMPLER_1D = 0x00008DC9,
        GL_INT_SAMPLER_2D = 0x00008DCA,
        GL_INT_SAMPLER_3D = 0x00008DCB,
        GL_INT_SAMPLER_CUBE = 0x00008DCC,
        GL_INT_SAMPLER_2D_RECT = 0x00008DCD,
        GL_INT_SAMPLER_1D_ARRAY = 0x00008DCE,
        GL_INT_SAMPLER_2D_ARRAY = 0x00008DCF,
        GL_INT_SAMPLER_BUFFER = 0x00008DD0,
        GL_UNSIGNED_INT_SAMPLER_1D = 0x00008DD1,
        GL_UNSIGNED_INT_SAMPLER_2D = 0x00008DD2,
        GL_UNSIGNED_INT_SAMPLER_3D = 0x00008DD3,
        GL_UNSIGNED_INT_SAMPLER_CUBE = 0x00008DD4,
        GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x00008DD5,
        GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x00008DD6,
        GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x00008DD7,
        GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8,
        GL_SAMPLER_2D_MULTISAMPLE = 0x00009108,
        GL_INT_SAMPLER_2D_MULTISAMPLE = 0x00009109,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A,
        GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B,
        GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D,
    }

    public enum UniformType : uint
    {
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
        GL_FLOAT_VEC2 = 0x00008B50,
        GL_FLOAT_VEC3 = 0x00008B51,
        GL_FLOAT_VEC4 = 0x00008B52,
        GL_INT_VEC2 = 0x00008B53,
        GL_INT_VEC3 = 0x00008B54,
        GL_INT_VEC4 = 0x00008B55,
        GL_BOOL = 0x00008B56,
        GL_BOOL_VEC2 = 0x00008B57,
        GL_BOOL_VEC3 = 0x00008B58,
        GL_BOOL_VEC4 = 0x00008B59,
        GL_FLOAT_MAT2 = 0x00008B5A,
        GL_FLOAT_MAT3 = 0x00008B5B,
        GL_FLOAT_MAT4 = 0x00008B5C,
        GL_SAMPLER_1D = 0x00008B5D,
        GL_SAMPLER_2D = 0x00008B5E,
        GL_SAMPLER_3D = 0x00008B5F,
        GL_SAMPLER_CUBE = 0x00008B60,
        GL_SAMPLER_1D_SHADOW = 0x00008B61,
        GL_SAMPLER_2D_SHADOW = 0x00008B62,
        GL_SAMPLER_2D_RECT = 0x00008B63,
        GL_SAMPLER_2D_RECT_SHADOW = 0x00008B64,
        GL_FLOAT_MAT2x3 = 0x00008B65,
        GL_FLOAT_MAT2x4 = 0x00008B66,
        GL_FLOAT_MAT3x2 = 0x00008B67,
        GL_FLOAT_MAT3x4 = 0x00008B68,
        GL_FLOAT_MAT4x2 = 0x00008B69,
        GL_FLOAT_MAT4x3 = 0x00008B6A,
        GL_SAMPLER_1D_ARRAY = 0x00008DC0,
        GL_SAMPLER_2D_ARRAY = 0x00008DC1,
        GL_SAMPLER_BUFFER = 0x00008DC2,
        GL_SAMPLER_1D_ARRAY_SHADOW = 0x00008DC3,
        GL_SAMPLER_2D_ARRAY_SHADOW = 0x00008DC4,
        GL_SAMPLER_CUBE_SHADOW = 0x00008DC5,
        GL_UNSIGNED_INT_VEC2 = 0x00008DC6,
        GL_UNSIGNED_INT_VEC3 = 0x00008DC7,
        GL_UNSIGNED_INT_VEC4 = 0x00008DC8,
        GL_INT_SAMPLER_1D = 0x00008DC9,
        GL_INT_SAMPLER_2D = 0x00008DCA,
        GL_INT_SAMPLER_3D = 0x00008DCB,
        GL_INT_SAMPLER_CUBE = 0x00008DCC,
        GL_INT_SAMPLER_2D_RECT = 0x00008DCD,
        GL_INT_SAMPLER_1D_ARRAY = 0x00008DCE,
        GL_INT_SAMPLER_2D_ARRAY = 0x00008DCF,
        GL_INT_SAMPLER_BUFFER = 0x00008DD0,
        GL_UNSIGNED_INT_SAMPLER_1D = 0x00008DD1,
        GL_UNSIGNED_INT_SAMPLER_2D = 0x00008DD2,
        GL_UNSIGNED_INT_SAMPLER_3D = 0x00008DD3,
        GL_UNSIGNED_INT_SAMPLER_CUBE = 0x00008DD4,
        GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x00008DD5,
        GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x00008DD6,
        GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x00008DD7,
        GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8,
        GL_SAMPLER_2D_MULTISAMPLE = 0x00009108,
        GL_INT_SAMPLER_2D_MULTISAMPLE = 0x00009109,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A,
        GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B,
        GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D,
    }

    public enum GlslTypeToken : uint
    {
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
        GL_FLOAT_VEC2 = 0x00008B50,
        GL_FLOAT_VEC3 = 0x00008B51,
        GL_FLOAT_VEC4 = 0x00008B52,
        GL_INT_VEC2 = 0x00008B53,
        GL_INT_VEC3 = 0x00008B54,
        GL_INT_VEC4 = 0x00008B55,
        GL_BOOL = 0x00008B56,
        GL_BOOL_VEC2 = 0x00008B57,
        GL_BOOL_VEC3 = 0x00008B58,
        GL_BOOL_VEC4 = 0x00008B59,
        GL_FLOAT_MAT2 = 0x00008B5A,
        GL_FLOAT_MAT3 = 0x00008B5B,
        GL_FLOAT_MAT4 = 0x00008B5C,
        GL_SAMPLER_1D = 0x00008B5D,
        GL_SAMPLER_2D = 0x00008B5E,
        GL_SAMPLER_3D = 0x00008B5F,
        GL_SAMPLER_CUBE = 0x00008B60,
        GL_SAMPLER_1D_SHADOW = 0x00008B61,
        GL_SAMPLER_2D_SHADOW = 0x00008B62,
        GL_SAMPLER_2D_RECT = 0x00008B63,
        GL_SAMPLER_2D_RECT_SHADOW = 0x00008B64,
        GL_FLOAT_MAT2x3 = 0x00008B65,
        GL_FLOAT_MAT2x4 = 0x00008B66,
        GL_FLOAT_MAT3x2 = 0x00008B67,
        GL_FLOAT_MAT3x4 = 0x00008B68,
        GL_FLOAT_MAT4x2 = 0x00008B69,
        GL_FLOAT_MAT4x3 = 0x00008B6A,
        GL_SAMPLER_1D_ARRAY = 0x00008DC0,
        GL_SAMPLER_2D_ARRAY = 0x00008DC1,
        GL_SAMPLER_BUFFER = 0x00008DC2,
        GL_SAMPLER_1D_ARRAY_SHADOW = 0x00008DC3,
        GL_SAMPLER_2D_ARRAY_SHADOW = 0x00008DC4,
        GL_SAMPLER_CUBE_SHADOW = 0x00008DC5,
        GL_UNSIGNED_INT_VEC2 = 0x00008DC6,
        GL_UNSIGNED_INT_VEC3 = 0x00008DC7,
        GL_UNSIGNED_INT_VEC4 = 0x00008DC8,
        GL_INT_SAMPLER_1D = 0x00008DC9,
        GL_INT_SAMPLER_2D = 0x00008DCA,
        GL_INT_SAMPLER_3D = 0x00008DCB,
        GL_INT_SAMPLER_CUBE = 0x00008DCC,
        GL_INT_SAMPLER_2D_RECT = 0x00008DCD,
        GL_INT_SAMPLER_1D_ARRAY = 0x00008DCE,
        GL_INT_SAMPLER_2D_ARRAY = 0x00008DCF,
        GL_INT_SAMPLER_BUFFER = 0x00008DD0,
        GL_UNSIGNED_INT_SAMPLER_1D = 0x00008DD1,
        GL_UNSIGNED_INT_SAMPLER_2D = 0x00008DD2,
        GL_UNSIGNED_INT_SAMPLER_3D = 0x00008DD3,
        GL_UNSIGNED_INT_SAMPLER_CUBE = 0x00008DD4,
        GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x00008DD5,
        GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x00008DD6,
        GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x00008DD7,
        GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8,
        GL_SAMPLER_2D_MULTISAMPLE = 0x00009108,
        GL_INT_SAMPLER_2D_MULTISAMPLE = 0x00009109,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A,
        GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B,
        GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D,
    }

    public enum MapTypeNV : uint
    {
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum VertexWeightPointerTypeEXT : uint
    {
        GL_FLOAT = 0x00001406,
    }

    public enum FogCoordinatePointerType : uint
    {
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum FogPointerTypeEXT : uint
    {
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum FogPointerTypeIBM : uint
    {
        GL_FLOAT = 0x00001406,
        GL_DOUBLE = 0x0000140A,
    }

    public enum VertexAttribLType : uint
    {
        GL_DOUBLE = 0x0000140A,
    }

    public enum LogicOp : uint
    {
        GL_CLEAR = 0x00001500,
        GL_AND = 0x00001501,
        GL_AND_REVERSE = 0x00001502,
        GL_COPY = 0x00001503,
        GL_AND_INVERTED = 0x00001504,
        GL_NOOP = 0x00001505,
        GL_XOR = 0x00001506,
        GL_OR = 0x00001507,
        GL_NOR = 0x00001508,
        GL_EQUIV = 0x00001509,
        GL_INVERT = 0x0000150A,
        GL_OR_REVERSE = 0x0000150B,
        GL_COPY_INVERTED = 0x0000150C,
        GL_OR_INVERTED = 0x0000150D,
        GL_NAND = 0x0000150E,
        GL_SET = 0x0000150F,
    }

    public enum PathFillMode : uint
    {
        GL_INVERT = 0x0000150A,
    }

    public enum MatrixMode : uint
    {
        GL_TEXTURE = 0x00001702,
    }

    public enum ObjectIdentifier : uint
    {
        GL_TEXTURE = 0x00001702,
        GL_VERTEX_ARRAY = 0x00008074,
        GL_BUFFER = 0x000082E0,
        GL_SHADER = 0x000082E1,
        GL_PROGRAM = 0x000082E2,
        GL_QUERY = 0x000082E3,
        GL_PROGRAM_PIPELINE = 0x000082E4,
        GL_SAMPLER = 0x000082E6,
        GL_FRAMEBUFFER = 0x00008D40,
        GL_RENDERBUFFER = 0x00008D41,
    }

    public enum Buffer : uint
    {
        GL_COLOR = 0x00001800,
        GL_DEPTH = 0x00001801,
        GL_STENCIL = 0x00001802,
    }

    public enum PixelCopyType : uint
    {
        GL_COLOR = 0x00001800,
        GL_DEPTH = 0x00001801,
        GL_STENCIL = 0x00001802,
    }

    public enum InvalidateFramebufferAttachment : uint
    {
        GL_COLOR = 0x00001800,
        GL_DEPTH = 0x00001801,
        GL_STENCIL = 0x00001802,
        GL_DEPTH_STENCIL_ATTACHMENT = 0x0000821A,
        GL_COLOR_ATTACHMENT0 = 0x00008CE0,
        GL_COLOR_ATTACHMENT1 = 0x00008CE1,
        GL_COLOR_ATTACHMENT2 = 0x00008CE2,
        GL_COLOR_ATTACHMENT3 = 0x00008CE3,
        GL_COLOR_ATTACHMENT4 = 0x00008CE4,
        GL_COLOR_ATTACHMENT5 = 0x00008CE5,
        GL_COLOR_ATTACHMENT6 = 0x00008CE6,
        GL_COLOR_ATTACHMENT7 = 0x00008CE7,
        GL_COLOR_ATTACHMENT8 = 0x00008CE8,
        GL_COLOR_ATTACHMENT9 = 0x00008CE9,
        GL_COLOR_ATTACHMENT10 = 0x00008CEA,
        GL_COLOR_ATTACHMENT11 = 0x00008CEB,
        GL_COLOR_ATTACHMENT12 = 0x00008CEC,
        GL_COLOR_ATTACHMENT13 = 0x00008CED,
        GL_COLOR_ATTACHMENT14 = 0x00008CEE,
        GL_COLOR_ATTACHMENT15 = 0x00008CEF,
        GL_COLOR_ATTACHMENT16 = 0x00008CF0,
        GL_COLOR_ATTACHMENT17 = 0x00008CF1,
        GL_COLOR_ATTACHMENT18 = 0x00008CF2,
        GL_COLOR_ATTACHMENT19 = 0x00008CF3,
        GL_COLOR_ATTACHMENT20 = 0x00008CF4,
        GL_COLOR_ATTACHMENT21 = 0x00008CF5,
        GL_COLOR_ATTACHMENT22 = 0x00008CF6,
        GL_COLOR_ATTACHMENT23 = 0x00008CF7,
        GL_COLOR_ATTACHMENT24 = 0x00008CF8,
        GL_COLOR_ATTACHMENT25 = 0x00008CF9,
        GL_COLOR_ATTACHMENT26 = 0x00008CFA,
        GL_COLOR_ATTACHMENT27 = 0x00008CFB,
        GL_COLOR_ATTACHMENT28 = 0x00008CFC,
        GL_COLOR_ATTACHMENT29 = 0x00008CFD,
        GL_COLOR_ATTACHMENT30 = 0x00008CFE,
        GL_COLOR_ATTACHMENT31 = 0x00008CFF,
        GL_DEPTH_ATTACHMENT = 0x00008D00,
    }

    public enum InternalFormat : uint
    {
        GL_STENCIL_INDEX = 0x00001901,
        GL_DEPTH_COMPONENT = 0x00001902,
        GL_RED = 0x00001903,
        GL_RGB = 0x00001907,
        GL_RGBA = 0x00001908,
        GL_R3_G3_B2 = 0x00002A10,
        GL_RGB4 = 0x0000804F,
        GL_RGB5 = 0x00008050,
        GL_RGB8 = 0x00008051,
        GL_RGB10 = 0x00008052,
        GL_RGB12 = 0x00008053,
        GL_RGB16 = 0x00008054,
        GL_RGBA2 = 0x00008055,
        GL_RGBA4 = 0x00008056,
        GL_RGB5_A1 = 0x00008057,
        GL_RGBA8 = 0x00008058,
        GL_RGB10_A2 = 0x00008059,
        GL_RGBA12 = 0x0000805A,
        GL_RGBA16 = 0x0000805B,
        GL_DEPTH_COMPONENT16 = 0x000081A5,
        GL_DEPTH_COMPONENT24 = 0x000081A6,
        GL_DEPTH_COMPONENT32 = 0x000081A7,
        GL_COMPRESSED_RED = 0x00008225,
        GL_COMPRESSED_RG = 0x00008226,
        GL_RG = 0x00008227,
        GL_R8 = 0x00008229,
        GL_R16 = 0x0000822A,
        GL_RG8 = 0x0000822B,
        GL_RG16 = 0x0000822C,
        GL_R16F = 0x0000822D,
        GL_R32F = 0x0000822E,
        GL_RG16F = 0x0000822F,
        GL_RG32F = 0x00008230,
        GL_R8I = 0x00008231,
        GL_R8UI = 0x00008232,
        GL_R16I = 0x00008233,
        GL_R16UI = 0x00008234,
        GL_R32I = 0x00008235,
        GL_R32UI = 0x00008236,
        GL_RG8I = 0x00008237,
        GL_RG8UI = 0x00008238,
        GL_RG16I = 0x00008239,
        GL_RG16UI = 0x0000823A,
        GL_RG32I = 0x0000823B,
        GL_RG32UI = 0x0000823C,
        GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x000083F0,
        GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x000083F1,
        GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x000083F2,
        GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x000083F3,
        GL_COMPRESSED_RGB = 0x000084ED,
        GL_COMPRESSED_RGBA = 0x000084EE,
        GL_DEPTH_STENCIL = 0x000084F9,
        GL_RGBA32F = 0x00008814,
        GL_RGB32F = 0x00008815,
        GL_RGBA16F = 0x0000881A,
        GL_RGB16F = 0x0000881B,
        GL_DEPTH24_STENCIL8 = 0x000088F0,
        GL_R11F_G11F_B10F = 0x00008C3A,
        GL_RGB9_E5 = 0x00008C3D,
        GL_SRGB = 0x00008C40,
        GL_SRGB8 = 0x00008C41,
        GL_SRGB_ALPHA = 0x00008C42,
        GL_SRGB8_ALPHA8 = 0x00008C43,
        GL_COMPRESSED_SRGB = 0x00008C48,
        GL_COMPRESSED_SRGB_ALPHA = 0x00008C49,
        GL_DEPTH_COMPONENT32F = 0x00008CAC,
        GL_DEPTH32F_STENCIL8 = 0x00008CAD,
        GL_STENCIL_INDEX1 = 0x00008D46,
        GL_STENCIL_INDEX4 = 0x00008D47,
        GL_STENCIL_INDEX8 = 0x00008D48,
        GL_STENCIL_INDEX16 = 0x00008D49,
        GL_RGBA32UI = 0x00008D70,
        GL_RGB32UI = 0x00008D71,
        GL_RGBA16UI = 0x00008D76,
        GL_RGB16UI = 0x00008D77,
        GL_RGBA8UI = 0x00008D7C,
        GL_RGB8UI = 0x00008D7D,
        GL_RGBA32I = 0x00008D82,
        GL_RGB32I = 0x00008D83,
        GL_RGBA16I = 0x00008D88,
        GL_RGB16I = 0x00008D89,
        GL_RGBA8I = 0x00008D8E,
        GL_RGB8I = 0x00008D8F,
        GL_COMPRESSED_RED_RGTC1 = 0x00008DBB,
        GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x00008DBC,
        GL_COMPRESSED_RG_RGTC2 = 0x00008DBD,
        GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x00008DBE,
        GL_R8_SNORM = 0x00008F94,
        GL_RG8_SNORM = 0x00008F95,
        GL_RGB8_SNORM = 0x00008F96,
        GL_RGBA8_SNORM = 0x00008F97,
        GL_R16_SNORM = 0x00008F98,
        GL_RG16_SNORM = 0x00008F99,
        GL_RGB16_SNORM = 0x00008F9A,
        GL_RGBA16_SNORM = 0x00008F9B,
        GL_RGB10_A2UI = 0x0000906F,
    }

    public enum DepthStencilTextureMode : uint
    {
        GL_STENCIL_INDEX = 0x00001901,
        GL_DEPTH_COMPONENT = 0x00001902,
    }

    public enum CombinerComponentUsageNV : uint
    {
        GL_BLUE = 0x00001905,
        GL_ALPHA = 0x00001906,
        GL_RGB = 0x00001907,
    }

    public enum CombinerPortionNV : uint
    {
        GL_ALPHA = 0x00001906,
        GL_RGB = 0x00001907,
    }

    public enum PolygonMode : uint
    {
        GL_POINT = 0x00001B00,
        GL_LINE = 0x00001B01,
        GL_FILL = 0x00001B02,
    }

    public enum MeshMode1 : uint
    {
        GL_POINT = 0x00001B00,
        GL_LINE = 0x00001B01,
    }

    public enum MeshMode2 : uint
    {
        GL_POINT = 0x00001B00,
        GL_LINE = 0x00001B01,
        GL_FILL = 0x00001B02,
    }

    public enum StringName : uint
    {
        GL_VENDOR = 0x00001F00,
        GL_RENDERER = 0x00001F01,
        GL_VERSION = 0x00001F02,
        GL_EXTENSIONS = 0x00001F03,
        GL_SHADING_LANGUAGE_VERSION = 0x00008B8C,
    }

    public enum BlitFramebufferFilter : uint
    {
        GL_NEAREST = 0x00002600,
        GL_LINEAR = 0x00002601,
    }

    public enum TextureMagFilter : uint
    {
        GL_NEAREST = 0x00002600,
        GL_LINEAR = 0x00002601,
    }

    public enum TextureMinFilter : uint
    {
        GL_NEAREST = 0x00002600,
        GL_LINEAR = 0x00002601,
        GL_NEAREST_MIPMAP_NEAREST = 0x00002700,
        GL_LINEAR_MIPMAP_NEAREST = 0x00002701,
        GL_NEAREST_MIPMAP_LINEAR = 0x00002702,
        GL_LINEAR_MIPMAP_LINEAR = 0x00002703,
    }

    public enum TextureWrapMode : uint
    {
        GL_LINEAR_MIPMAP_LINEAR = 0x00002703,
        GL_REPEAT = 0x00002901,
        GL_CLAMP_TO_BORDER = 0x0000812D,
        GL_CLAMP_TO_EDGE = 0x0000812F,
        GL_MIRRORED_REPEAT = 0x00008370,
    }

    public enum SamplerParameterI : uint
    {
        GL_TEXTURE_MAG_FILTER = 0x00002800,
        GL_TEXTURE_MIN_FILTER = 0x00002801,
        GL_TEXTURE_WRAP_S = 0x00002802,
        GL_TEXTURE_WRAP_T = 0x00002803,
        GL_TEXTURE_WRAP_R = 0x00008072,
        GL_TEXTURE_COMPARE_MODE = 0x0000884C,
        GL_TEXTURE_COMPARE_FUNC = 0x0000884D,
    }

    public enum SizedInternalFormat : uint
    {
        GL_R3_G3_B2 = 0x00002A10,
        GL_RGB4 = 0x0000804F,
        GL_RGB5 = 0x00008050,
        GL_RGB8 = 0x00008051,
        GL_RGB10 = 0x00008052,
        GL_RGB12 = 0x00008053,
        GL_RGB16 = 0x00008054,
        GL_RGBA2 = 0x00008055,
        GL_RGBA4 = 0x00008056,
        GL_RGB5_A1 = 0x00008057,
        GL_RGBA8 = 0x00008058,
        GL_RGB10_A2 = 0x00008059,
        GL_RGBA12 = 0x0000805A,
        GL_RGBA16 = 0x0000805B,
        GL_DEPTH_COMPONENT16 = 0x000081A5,
        GL_DEPTH_COMPONENT24 = 0x000081A6,
        GL_DEPTH_COMPONENT32 = 0x000081A7,
        GL_R8 = 0x00008229,
        GL_R16 = 0x0000822A,
        GL_RG8 = 0x0000822B,
        GL_RG16 = 0x0000822C,
        GL_R16F = 0x0000822D,
        GL_R32F = 0x0000822E,
        GL_RG16F = 0x0000822F,
        GL_RG32F = 0x00008230,
        GL_R8I = 0x00008231,
        GL_R8UI = 0x00008232,
        GL_R16I = 0x00008233,
        GL_R16UI = 0x00008234,
        GL_R32I = 0x00008235,
        GL_R32UI = 0x00008236,
        GL_RG8I = 0x00008237,
        GL_RG8UI = 0x00008238,
        GL_RG16I = 0x00008239,
        GL_RG16UI = 0x0000823A,
        GL_RG32I = 0x0000823B,
        GL_RG32UI = 0x0000823C,
        GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x000083F0,
        GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x000083F1,
        GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x000083F2,
        GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x000083F3,
        GL_RGBA32F = 0x00008814,
        GL_RGB32F = 0x00008815,
        GL_RGBA16F = 0x0000881A,
        GL_RGB16F = 0x0000881B,
        GL_DEPTH24_STENCIL8 = 0x000088F0,
        GL_R11F_G11F_B10F = 0x00008C3A,
        GL_RGB9_E5 = 0x00008C3D,
        GL_SRGB8 = 0x00008C41,
        GL_SRGB8_ALPHA8 = 0x00008C43,
        GL_DEPTH_COMPONENT32F = 0x00008CAC,
        GL_DEPTH32F_STENCIL8 = 0x00008CAD,
        GL_STENCIL_INDEX1 = 0x00008D46,
        GL_STENCIL_INDEX4 = 0x00008D47,
        GL_STENCIL_INDEX8 = 0x00008D48,
        GL_STENCIL_INDEX16 = 0x00008D49,
        GL_RGBA32UI = 0x00008D70,
        GL_RGB32UI = 0x00008D71,
        GL_RGBA16UI = 0x00008D76,
        GL_RGB16UI = 0x00008D77,
        GL_RGBA8UI = 0x00008D7C,
        GL_RGB8UI = 0x00008D7D,
        GL_RGBA32I = 0x00008D82,
        GL_RGB32I = 0x00008D83,
        GL_RGBA16I = 0x00008D88,
        GL_RGB16I = 0x00008D89,
        GL_RGBA8I = 0x00008D8E,
        GL_RGB8I = 0x00008D8F,
        GL_COMPRESSED_RED_RGTC1 = 0x00008DBB,
        GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x00008DBC,
        GL_COMPRESSED_RG_RGTC2 = 0x00008DBD,
        GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x00008DBE,
        GL_R8_SNORM = 0x00008F94,
        GL_RG8_SNORM = 0x00008F95,
        GL_RGB8_SNORM = 0x00008F96,
        GL_RGBA8_SNORM = 0x00008F97,
        GL_R16_SNORM = 0x00008F98,
        GL_RG16_SNORM = 0x00008F99,
        GL_RGB16_SNORM = 0x00008F9A,
        GL_RGBA16_SNORM = 0x00008F9B,
        GL_RGB10_A2UI = 0x0000906F,
    }

    public enum ClipPlaneName : uint
    {
        GL_CLIP_DISTANCE0 = 0x00003000,
        GL_CLIP_DISTANCE1 = 0x00003001,
        GL_CLIP_DISTANCE2 = 0x00003002,
        GL_CLIP_DISTANCE3 = 0x00003003,
        GL_CLIP_DISTANCE4 = 0x00003004,
        GL_CLIP_DISTANCE5 = 0x00003005,
        GL_CLIP_DISTANCE6 = 0x00003006,
        GL_CLIP_DISTANCE7 = 0x00003007,
    }

    public enum BlendEquationModeEXT : uint
    {
        GL_FUNC_ADD = 0x00008006,
        GL_MIN = 0x00008007,
        GL_MAX = 0x00008008,
        GL_FUNC_SUBTRACT = 0x0000800A,
        GL_FUNC_REVERSE_SUBTRACT = 0x0000800B,
    }

    public enum InternalFormatPName : uint
    {
        GL_SAMPLES = 0x000080A9,
        GL_TEXTURE_COMPRESSED = 0x000086A1,
    }

    public enum BufferTargetARB : uint
    {
        GL_ARRAY_BUFFER = 0x00008892,
        GL_ELEMENT_ARRAY_BUFFER = 0x00008893,
        GL_PIXEL_PACK_BUFFER = 0x000088EB,
        GL_PIXEL_UNPACK_BUFFER = 0x000088EC,
        GL_UNIFORM_BUFFER = 0x00008A11,
        GL_TEXTURE_BUFFER = 0x00008C2A,
        GL_TRANSFORM_FEEDBACK_BUFFER = 0x00008C8E,
        GL_COPY_READ_BUFFER = 0x00008F36,
        GL_COPY_WRITE_BUFFER = 0x00008F37,
    }

    public enum PointParameterNameSGIS : uint
    {
        GL_POINT_FADE_THRESHOLD_SIZE = 0x00008128,
    }

    public enum PointParameterNameARB : uint
    {
        GL_POINT_FADE_THRESHOLD_SIZE = 0x00008128,
    }

    public enum FramebufferAttachmentParameterName : uint
    {
        GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x00008210,
        GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x00008211,
        GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x00008212,
        GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x00008213,
        GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x00008214,
        GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x00008215,
        GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x00008216,
        GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x00008217,
        GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x00008CD0,
        GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x00008CD1,
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x00008CD2,
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x00008CD3,
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x00008CD4,
        GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x00008DA7,
    }

    public enum FramebufferStatus : uint
    {
        GL_FRAMEBUFFER_UNDEFINED = 0x00008219,
        GL_FRAMEBUFFER_COMPLETE = 0x00008CD5,
        GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x00008CD6,
        GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x00008CD7,
        GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x00008CDB,
        GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x00008CDC,
        GL_FRAMEBUFFER_UNSUPPORTED = 0x00008CDD,
        GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x00008D56,
        GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x00008DA8,
    }

    public enum FramebufferAttachment : uint
    {
        GL_DEPTH_STENCIL_ATTACHMENT = 0x0000821A,
        GL_COLOR_ATTACHMENT0 = 0x00008CE0,
        GL_COLOR_ATTACHMENT1 = 0x00008CE1,
        GL_COLOR_ATTACHMENT2 = 0x00008CE2,
        GL_COLOR_ATTACHMENT3 = 0x00008CE3,
        GL_COLOR_ATTACHMENT4 = 0x00008CE4,
        GL_COLOR_ATTACHMENT5 = 0x00008CE5,
        GL_COLOR_ATTACHMENT6 = 0x00008CE6,
        GL_COLOR_ATTACHMENT7 = 0x00008CE7,
        GL_COLOR_ATTACHMENT8 = 0x00008CE8,
        GL_COLOR_ATTACHMENT9 = 0x00008CE9,
        GL_COLOR_ATTACHMENT10 = 0x00008CEA,
        GL_COLOR_ATTACHMENT11 = 0x00008CEB,
        GL_COLOR_ATTACHMENT12 = 0x00008CEC,
        GL_COLOR_ATTACHMENT13 = 0x00008CED,
        GL_COLOR_ATTACHMENT14 = 0x00008CEE,
        GL_COLOR_ATTACHMENT15 = 0x00008CEF,
        GL_COLOR_ATTACHMENT16 = 0x00008CF0,
        GL_COLOR_ATTACHMENT17 = 0x00008CF1,
        GL_COLOR_ATTACHMENT18 = 0x00008CF2,
        GL_COLOR_ATTACHMENT19 = 0x00008CF3,
        GL_COLOR_ATTACHMENT20 = 0x00008CF4,
        GL_COLOR_ATTACHMENT21 = 0x00008CF5,
        GL_COLOR_ATTACHMENT22 = 0x00008CF6,
        GL_COLOR_ATTACHMENT23 = 0x00008CF7,
        GL_COLOR_ATTACHMENT24 = 0x00008CF8,
        GL_COLOR_ATTACHMENT25 = 0x00008CF9,
        GL_COLOR_ATTACHMENT26 = 0x00008CFA,
        GL_COLOR_ATTACHMENT27 = 0x00008CFB,
        GL_COLOR_ATTACHMENT28 = 0x00008CFC,
        GL_COLOR_ATTACHMENT29 = 0x00008CFD,
        GL_COLOR_ATTACHMENT30 = 0x00008CFE,
        GL_COLOR_ATTACHMENT31 = 0x00008CFF,
        GL_DEPTH_ATTACHMENT = 0x00008D00,
        GL_STENCIL_ATTACHMENT = 0x00008D20,
    }

    public enum VertexBufferObjectParameter : uint
    {
        GL_BUFFER_SIZE = 0x00008764,
        GL_BUFFER_USAGE = 0x00008765,
        GL_BUFFER_ACCESS = 0x000088BB,
        GL_BUFFER_MAPPED = 0x000088BC,
        GL_BUFFER_ACCESS_FLAGS = 0x0000911F,
        GL_BUFFER_MAP_LENGTH = 0x00009120,
        GL_BUFFER_MAP_OFFSET = 0x00009121,
    }

    public enum BufferPNameARB : uint
    {
        GL_BUFFER_SIZE = 0x00008764,
        GL_BUFFER_USAGE = 0x00008765,
        GL_BUFFER_ACCESS = 0x000088BB,
        GL_BUFFER_MAPPED = 0x000088BC,
        GL_BUFFER_ACCESS_FLAGS = 0x0000911F,
        GL_BUFFER_MAP_LENGTH = 0x00009120,
        GL_BUFFER_MAP_OFFSET = 0x00009121,
    }

    public enum PipelineParameterName : uint
    {
        GL_FRAGMENT_SHADER = 0x00008B30,
        GL_VERTEX_SHADER = 0x00008B31,
        GL_INFO_LOG_LENGTH = 0x00008B84,
        GL_GEOMETRY_SHADER = 0x00008DD9,
    }

    public enum ProgramPropertyARB : uint
    {
        GL_GEOMETRY_VERTICES_OUT = 0x00008916,
        GL_GEOMETRY_INPUT_TYPE = 0x00008917,
        GL_GEOMETRY_OUTPUT_TYPE = 0x00008918,
        GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x00008A35,
        GL_ACTIVE_UNIFORM_BLOCKS = 0x00008A36,
        GL_DELETE_STATUS = 0x00008B80,
        GL_LINK_STATUS = 0x00008B82,
        GL_VALIDATE_STATUS = 0x00008B83,
        GL_INFO_LOG_LENGTH = 0x00008B84,
        GL_ATTACHED_SHADERS = 0x00008B85,
        GL_ACTIVE_UNIFORMS = 0x00008B86,
        GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x00008B87,
        GL_ACTIVE_ATTRIBUTES = 0x00008B89,
        GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x00008B8A,
        GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x00008C76,
        GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x00008C7F,
        GL_TRANSFORM_FEEDBACK_VARYINGS = 0x00008C83,
    }

    public enum VertexAttribPropertyARB : uint
    {
        GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622,
        GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623,
        GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624,
        GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625,
        GL_CURRENT_VERTEX_ATTRIB = 0x00008626,
        GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886A,
        GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x0000889F,
        GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x000088FD,
        GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x000088FE,
    }

    public enum VertexArrayPName : uint
    {
        GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622,
        GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623,
        GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624,
        GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625,
        GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886A,
        GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x000088FD,
        GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x000088FE,
    }

    public enum QueryObjectParameterName : uint
    {
        GL_QUERY_RESULT = 0x00008866,
        GL_QUERY_RESULT_AVAILABLE = 0x00008867,
    }

    public enum QueryTarget : uint
    {
        GL_TIME_ELAPSED = 0x000088BF,
        GL_SAMPLES_PASSED = 0x00008914,
        GL_ANY_SAMPLES_PASSED = 0x00008C2F,
        GL_PRIMITIVES_GENERATED = 0x00008C87,
        GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x00008C88,
    }

    public enum TextureUnit : uint
    {
        GL_TEXTURE0 = 0x000084C0,
        GL_TEXTURE1 = 0x000084C1,
        GL_TEXTURE2 = 0x000084C2,
        GL_TEXTURE3 = 0x000084C3,
        GL_TEXTURE4 = 0x000084C4,
        GL_TEXTURE5 = 0x000084C5,
        GL_TEXTURE6 = 0x000084C6,
        GL_TEXTURE7 = 0x000084C7,
        GL_TEXTURE8 = 0x000084C8,
        GL_TEXTURE9 = 0x000084C9,
        GL_TEXTURE10 = 0x000084CA,
        GL_TEXTURE11 = 0x000084CB,
        GL_TEXTURE12 = 0x000084CC,
        GL_TEXTURE13 = 0x000084CD,
        GL_TEXTURE14 = 0x000084CE,
        GL_TEXTURE15 = 0x000084CF,
        GL_TEXTURE16 = 0x000084D0,
        GL_TEXTURE17 = 0x000084D1,
        GL_TEXTURE18 = 0x000084D2,
        GL_TEXTURE19 = 0x000084D3,
        GL_TEXTURE20 = 0x000084D4,
        GL_TEXTURE21 = 0x000084D5,
        GL_TEXTURE22 = 0x000084D6,
        GL_TEXTURE23 = 0x000084D7,
        GL_TEXTURE24 = 0x000084D8,
        GL_TEXTURE25 = 0x000084D9,
        GL_TEXTURE26 = 0x000084DA,
        GL_TEXTURE27 = 0x000084DB,
        GL_TEXTURE28 = 0x000084DC,
        GL_TEXTURE29 = 0x000084DD,
        GL_TEXTURE30 = 0x000084DE,
        GL_TEXTURE31 = 0x000084DF,
    }

    public enum UniformBlockPName : uint
    {
        GL_UNIFORM_BLOCK_BINDING = 0x00008A3F,
        GL_UNIFORM_BLOCK_DATA_SIZE = 0x00008A40,
        GL_UNIFORM_BLOCK_NAME_LENGTH = 0x00008A41,
        GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x00008A42,
        GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x00008A43,
        GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x00008A44,
        GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x00008A45,
        GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x00008A46,
    }

    public enum RegisterCombinerPname : uint
    {
        GL_SRC1_ALPHA = 0x00008589,
    }

    public enum VertexAttribEnum : uint
    {
        GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622,
        GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623,
        GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624,
        GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625,
        GL_CURRENT_VERTEX_ATTRIB = 0x00008626,
        GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886A,
        GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x0000889F,
        GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x000088FD,
        GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x000088FE,
    }

    public enum VertexAttribPointerPropertyARB : uint
    {
        GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x00008645,
    }

    public enum QueryParameterName : uint
    {
        GL_QUERY_COUNTER_BITS = 0x00008864,
        GL_CURRENT_QUERY = 0x00008865,
    }

    public enum CopyBufferSubDataTarget : uint
    {
        GL_ARRAY_BUFFER = 0x00008892,
        GL_ELEMENT_ARRAY_BUFFER = 0x00008893,
        GL_PIXEL_PACK_BUFFER = 0x000088EB,
        GL_PIXEL_UNPACK_BUFFER = 0x000088EC,
        GL_UNIFORM_BUFFER = 0x00008A11,
        GL_TEXTURE_BUFFER = 0x00008C2A,
        GL_TRANSFORM_FEEDBACK_BUFFER = 0x00008C8E,
        GL_COPY_READ_BUFFER = 0x00008F36,
        GL_COPY_WRITE_BUFFER = 0x00008F37,
    }

    public enum BufferStorageTarget : uint
    {
        GL_ARRAY_BUFFER = 0x00008892,
        GL_ELEMENT_ARRAY_BUFFER = 0x00008893,
        GL_PIXEL_PACK_BUFFER = 0x000088EB,
        GL_PIXEL_UNPACK_BUFFER = 0x000088EC,
        GL_UNIFORM_BUFFER = 0x00008A11,
        GL_TEXTURE_BUFFER = 0x00008C2A,
        GL_TRANSFORM_FEEDBACK_BUFFER = 0x00008C8E,
        GL_COPY_READ_BUFFER = 0x00008F36,
        GL_COPY_WRITE_BUFFER = 0x00008F37,
    }

    public enum BufferAccessARB : uint
    {
        GL_READ_ONLY = 0x000088B8,
        GL_WRITE_ONLY = 0x000088B9,
        GL_READ_WRITE = 0x000088BA,
    }

    public enum BufferPointerNameARB : uint
    {
        GL_BUFFER_MAP_POINTER = 0x000088BD,
    }

    public enum VertexBufferObjectUsage : uint
    {
        GL_STREAM_DRAW = 0x000088E0,
        GL_STREAM_READ = 0x000088E1,
        GL_STREAM_COPY = 0x000088E2,
        GL_STATIC_DRAW = 0x000088E4,
        GL_STATIC_READ = 0x000088E5,
        GL_STATIC_COPY = 0x000088E6,
        GL_DYNAMIC_DRAW = 0x000088E8,
        GL_DYNAMIC_READ = 0x000088E9,
        GL_DYNAMIC_COPY = 0x000088EA,
    }

    public enum BufferUsageARB : uint
    {
        GL_STREAM_DRAW = 0x000088E0,
        GL_STREAM_READ = 0x000088E1,
        GL_STREAM_COPY = 0x000088E2,
        GL_STATIC_DRAW = 0x000088E4,
        GL_STATIC_READ = 0x000088E5,
        GL_STATIC_COPY = 0x000088E6,
        GL_DYNAMIC_DRAW = 0x000088E8,
        GL_DYNAMIC_READ = 0x000088E9,
        GL_DYNAMIC_COPY = 0x000088EA,
    }

    public enum ClampColorTargetARB : uint
    {
        GL_CLAMP_READ_COLOR = 0x0000891C,
    }

    public enum UniformPName : uint
    {
        GL_UNIFORM_TYPE = 0x00008A37,
        GL_UNIFORM_SIZE = 0x00008A38,
        GL_UNIFORM_NAME_LENGTH = 0x00008A39,
        GL_UNIFORM_BLOCK_INDEX = 0x00008A3A,
        GL_UNIFORM_OFFSET = 0x00008A3B,
        GL_UNIFORM_ARRAY_STRIDE = 0x00008A3C,
        GL_UNIFORM_MATRIX_STRIDE = 0x00008A3D,
        GL_UNIFORM_IS_ROW_MAJOR = 0x00008A3E,
    }

    public enum SubroutineParameterName : uint
    {
        GL_UNIFORM_SIZE = 0x00008A38,
        GL_UNIFORM_NAME_LENGTH = 0x00008A39,
    }

    public enum ShaderType : uint
    {
        GL_FRAGMENT_SHADER = 0x00008B30,
        GL_VERTEX_SHADER = 0x00008B31,
        GL_GEOMETRY_SHADER = 0x00008DD9,
    }

    public enum ShaderParameterName : uint
    {
        GL_SHADER_TYPE = 0x00008B4F,
        GL_DELETE_STATUS = 0x00008B80,
        GL_COMPILE_STATUS = 0x00008B81,
        GL_INFO_LOG_LENGTH = 0x00008B84,
        GL_SHADER_SOURCE_LENGTH = 0x00008B88,
    }

    public enum TransformFeedbackPName : uint
    {
        GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x00008C84,
        GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x00008C85,
        GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x00008C8F,
    }

    public enum TransformFeedbackBufferMode : uint
    {
        GL_INTERLEAVED_ATTRIBS = 0x00008C8C,
        GL_SEPARATE_ATTRIBS = 0x00008C8D,
    }

    public enum ProgramInterface : uint
    {
        GL_TRANSFORM_FEEDBACK_BUFFER = 0x00008C8E,
    }

    public enum ClipControlOrigin : uint
    {
        GL_LOWER_LEFT = 0x00008CA1,
        GL_UPPER_LEFT = 0x00008CA2,
    }

    public enum CheckFramebufferStatusTarget : uint
    {
        GL_READ_FRAMEBUFFER = 0x00008CA8,
        GL_DRAW_FRAMEBUFFER = 0x00008CA9,
        GL_FRAMEBUFFER = 0x00008D40,
    }

    public enum FramebufferTarget : uint
    {
        GL_READ_FRAMEBUFFER = 0x00008CA8,
        GL_DRAW_FRAMEBUFFER = 0x00008CA9,
        GL_FRAMEBUFFER = 0x00008D40,
    }

    public enum RenderbufferParameterName : uint
    {
        GL_RENDERBUFFER_SAMPLES = 0x00008CAB,
        GL_RENDERBUFFER_WIDTH = 0x00008D42,
        GL_RENDERBUFFER_HEIGHT = 0x00008D43,
        GL_RENDERBUFFER_INTERNAL_FORMAT = 0x00008D44,
        GL_RENDERBUFFER_RED_SIZE = 0x00008D50,
        GL_RENDERBUFFER_GREEN_SIZE = 0x00008D51,
        GL_RENDERBUFFER_BLUE_SIZE = 0x00008D52,
        GL_RENDERBUFFER_ALPHA_SIZE = 0x00008D53,
        GL_RENDERBUFFER_DEPTH_SIZE = 0x00008D54,
        GL_RENDERBUFFER_STENCIL_SIZE = 0x00008D55,
    }

    public enum RenderbufferTarget : uint
    {
        GL_RENDERBUFFER = 0x00008D41,
    }

    public enum ConditionalRenderMode : uint
    {
        GL_QUERY_WAIT = 0x00008E13,
        GL_QUERY_NO_WAIT = 0x00008E14,
        GL_QUERY_BY_REGION_WAIT = 0x00008E15,
        GL_QUERY_BY_REGION_NO_WAIT = 0x00008E16,
    }

    public enum QueryCounterTarget : uint
    {
        GL_TIMESTAMP = 0x00008E28,
    }

    public enum VertexProvokingMode : uint
    {
        GL_FIRST_VERTEX_CONVENTION = 0x00008E4D,
        GL_LAST_VERTEX_CONVENTION = 0x00008E4E,
    }

    public enum GetMultisamplePNameNV : uint
    {
        GL_SAMPLE_POSITION = 0x00008E50,
    }

    public enum SyncParameterName : uint
    {
        GL_OBJECT_TYPE = 0x00009112,
        GL_SYNC_CONDITION = 0x00009113,
        GL_SYNC_STATUS = 0x00009114,
        GL_SYNC_FLAGS = 0x00009115,
    }

    public enum SyncCondition : uint
    {
        GL_SYNC_GPU_COMMANDS_COMPLETE = 0x00009117,
    }

    public enum SyncStatus : uint
    {
        GL_ALREADY_SIGNALED = 0x0000911A,
        GL_TIMEOUT_EXPIRED = 0x0000911B,
        GL_CONDITION_SATISFIED = 0x0000911C,
        GL_WAIT_FAILED = 0x0000911D,
    }

    public enum GLenum : uint
    {
        GL_DEPTH_BUFFER_BIT = 0x00000100,
        GL_STENCIL_BUFFER_BIT = 0x00000400,
        GL_COLOR_BUFFER_BIT = 0x00004000,
        GL_FALSE = 0x00000000,
        GL_TRUE = 0x00000001,
        GL_POINTS = 0x00000000,
        GL_LINES = 0x00000001,
        GL_LINE_LOOP = 0x00000002,
        GL_LINE_STRIP = 0x00000003,
        GL_TRIANGLES = 0x00000004,
        GL_TRIANGLE_STRIP = 0x00000005,
        GL_TRIANGLE_FAN = 0x00000006,
        GL_NEVER = 0x00000200,
        GL_LESS = 0x00000201,
        GL_EQUAL = 0x00000202,
        GL_LEQUAL = 0x00000203,
        GL_GREATER = 0x00000204,
        GL_NOTEQUAL = 0x00000205,
        GL_GEQUAL = 0x00000206,
        GL_ALWAYS = 0x00000207,
        GL_ZERO = 0x00000000,
        GL_ONE = 0x00000001,
        GL_SRC_COLOR = 0x00000300,
        GL_ONE_MINUS_SRC_COLOR = 0x00000301,
        GL_SRC_ALPHA = 0x00000302,
        GL_ONE_MINUS_SRC_ALPHA = 0x00000303,
        GL_DST_ALPHA = 0x00000304,
        GL_ONE_MINUS_DST_ALPHA = 0x00000305,
        GL_DST_COLOR = 0x00000306,
        GL_ONE_MINUS_DST_COLOR = 0x00000307,
        GL_SRC_ALPHA_SATURATE = 0x00000308,
        GL_NONE = 0x00000000,
        GL_FRONT_LEFT = 0x00000400,
        GL_FRONT_RIGHT = 0x00000401,
        GL_BACK_LEFT = 0x00000402,
        GL_BACK_RIGHT = 0x00000403,
        GL_FRONT = 0x00000404,
        GL_BACK = 0x00000405,
        GL_LEFT = 0x00000406,
        GL_RIGHT = 0x00000407,
        GL_FRONT_AND_BACK = 0x00000408,
        GL_NO_ERROR = 0x00000000,
        GL_INVALID_ENUM = 0x00000500,
        GL_INVALID_VALUE = 0x00000501,
        GL_INVALID_OPERATION = 0x00000502,
        GL_OUT_OF_MEMORY = 0x00000505,
        GL_CW = 0x00000900,
        GL_CCW = 0x00000901,
        GL_POINT_SIZE = 0x00000B11,
        GL_POINT_SIZE_RANGE = 0x00000B12,
        GL_POINT_SIZE_GRANULARITY = 0x00000B13,
        GL_LINE_SMOOTH = 0x00000B20,
        GL_LINE_WIDTH = 0x00000B21,
        GL_LINE_WIDTH_RANGE = 0x00000B22,
        GL_LINE_WIDTH_GRANULARITY = 0x00000B23,
        GL_POLYGON_MODE = 0x00000B40,
        GL_POLYGON_SMOOTH = 0x00000B41,
        GL_CULL_FACE = 0x00000B44,
        GL_CULL_FACE_MODE = 0x00000B45,
        GL_FRONT_FACE = 0x00000B46,
        GL_DEPTH_RANGE = 0x00000B70,
        GL_DEPTH_TEST = 0x00000B71,
        GL_DEPTH_WRITEMASK = 0x00000B72,
        GL_DEPTH_CLEAR_VALUE = 0x00000B73,
        GL_DEPTH_FUNC = 0x00000B74,
        GL_STENCIL_TEST = 0x00000B90,
        GL_STENCIL_CLEAR_VALUE = 0x00000B91,
        GL_STENCIL_FUNC = 0x00000B92,
        GL_STENCIL_VALUE_MASK = 0x00000B93,
        GL_STENCIL_FAIL = 0x00000B94,
        GL_STENCIL_PASS_DEPTH_FAIL = 0x00000B95,
        GL_STENCIL_PASS_DEPTH_PASS = 0x00000B96,
        GL_STENCIL_REF = 0x00000B97,
        GL_STENCIL_WRITEMASK = 0x00000B98,
        GL_VIEWPORT = 0x00000BA2,
        GL_DITHER = 0x00000BD0,
        GL_BLEND_DST = 0x00000BE0,
        GL_BLEND_SRC = 0x00000BE1,
        GL_BLEND = 0x00000BE2,
        GL_LOGIC_OP_MODE = 0x00000BF0,
        GL_DRAW_BUFFER = 0x00000C01,
        GL_READ_BUFFER = 0x00000C02,
        GL_SCISSOR_BOX = 0x00000C10,
        GL_SCISSOR_TEST = 0x00000C11,
        GL_COLOR_CLEAR_VALUE = 0x00000C22,
        GL_COLOR_WRITEMASK = 0x00000C23,
        GL_DOUBLEBUFFER = 0x00000C32,
        GL_STEREO = 0x00000C33,
        GL_LINE_SMOOTH_HINT = 0x00000C52,
        GL_POLYGON_SMOOTH_HINT = 0x00000C53,
        GL_UNPACK_SWAP_BYTES = 0x00000CF0,
        GL_UNPACK_LSB_FIRST = 0x00000CF1,
        GL_UNPACK_ROW_LENGTH = 0x00000CF2,
        GL_UNPACK_SKIP_ROWS = 0x00000CF3,
        GL_UNPACK_SKIP_PIXELS = 0x00000CF4,
        GL_UNPACK_ALIGNMENT = 0x00000CF5,
        GL_PACK_SWAP_BYTES = 0x00000D00,
        GL_PACK_LSB_FIRST = 0x00000D01,
        GL_PACK_ROW_LENGTH = 0x00000D02,
        GL_PACK_SKIP_ROWS = 0x00000D03,
        GL_PACK_SKIP_PIXELS = 0x00000D04,
        GL_PACK_ALIGNMENT = 0x00000D05,
        GL_MAX_TEXTURE_SIZE = 0x00000D33,
        GL_MAX_VIEWPORT_DIMS = 0x00000D3A,
        GL_SUBPIXEL_BITS = 0x00000D50,
        GL_TEXTURE_1D = 0x00000DE0,
        GL_TEXTURE_2D = 0x00000DE1,
        GL_TEXTURE_WIDTH = 0x00001000,
        GL_TEXTURE_HEIGHT = 0x00001001,
        GL_TEXTURE_BORDER_COLOR = 0x00001004,
        GL_DONT_CARE = 0x00001100,
        GL_FASTEST = 0x00001101,
        GL_NICEST = 0x00001102,
        GL_BYTE = 0x00001400,
        GL_UNSIGNED_BYTE = 0x00001401,
        GL_SHORT = 0x00001402,
        GL_UNSIGNED_SHORT = 0x00001403,
        GL_INT = 0x00001404,
        GL_UNSIGNED_INT = 0x00001405,
        GL_FLOAT = 0x00001406,
        GL_CLEAR = 0x00001500,
        GL_AND = 0x00001501,
        GL_AND_REVERSE = 0x00001502,
        GL_COPY = 0x00001503,
        GL_AND_INVERTED = 0x00001504,
        GL_NOOP = 0x00001505,
        GL_XOR = 0x00001506,
        GL_OR = 0x00001507,
        GL_NOR = 0x00001508,
        GL_EQUIV = 0x00001509,
        GL_INVERT = 0x0000150A,
        GL_OR_REVERSE = 0x0000150B,
        GL_COPY_INVERTED = 0x0000150C,
        GL_OR_INVERTED = 0x0000150D,
        GL_NAND = 0x0000150E,
        GL_SET = 0x0000150F,
        GL_TEXTURE = 0x00001702,
        GL_COLOR = 0x00001800,
        GL_DEPTH = 0x00001801,
        GL_STENCIL = 0x00001802,
        GL_STENCIL_INDEX = 0x00001901,
        GL_DEPTH_COMPONENT = 0x00001902,
        GL_RED = 0x00001903,
        GL_GREEN = 0x00001904,
        GL_BLUE = 0x00001905,
        GL_ALPHA = 0x00001906,
        GL_RGB = 0x00001907,
        GL_RGBA = 0x00001908,
        GL_POINT = 0x00001B00,
        GL_LINE = 0x00001B01,
        GL_FILL = 0x00001B02,
        GL_KEEP = 0x00001E00,
        GL_REPLACE = 0x00001E01,
        GL_INCR = 0x00001E02,
        GL_DECR = 0x00001E03,
        GL_VENDOR = 0x00001F00,
        GL_RENDERER = 0x00001F01,
        GL_VERSION = 0x00001F02,
        GL_EXTENSIONS = 0x00001F03,
        GL_NEAREST = 0x00002600,
        GL_LINEAR = 0x00002601,
        GL_NEAREST_MIPMAP_NEAREST = 0x00002700,
        GL_LINEAR_MIPMAP_NEAREST = 0x00002701,
        GL_NEAREST_MIPMAP_LINEAR = 0x00002702,
        GL_LINEAR_MIPMAP_LINEAR = 0x00002703,
        GL_TEXTURE_MAG_FILTER = 0x00002800,
        GL_TEXTURE_MIN_FILTER = 0x00002801,
        GL_TEXTURE_WRAP_S = 0x00002802,
        GL_TEXTURE_WRAP_T = 0x00002803,
        GL_REPEAT = 0x00002901,
        GL_COLOR_LOGIC_OP = 0x00000BF2,
        GL_POLYGON_OFFSET_UNITS = 0x00002A00,
        GL_POLYGON_OFFSET_POINT = 0x00002A01,
        GL_POLYGON_OFFSET_LINE = 0x00002A02,
        GL_POLYGON_OFFSET_FILL = 0x00008037,
        GL_POLYGON_OFFSET_FACTOR = 0x00008038,
        GL_TEXTURE_BINDING_1D = 0x00008068,
        GL_TEXTURE_BINDING_2D = 0x00008069,
        GL_TEXTURE_INTERNAL_FORMAT = 0x00001003,
        GL_TEXTURE_RED_SIZE = 0x0000805C,
        GL_TEXTURE_GREEN_SIZE = 0x0000805D,
        GL_TEXTURE_BLUE_SIZE = 0x0000805E,
        GL_TEXTURE_ALPHA_SIZE = 0x0000805F,
        GL_DOUBLE = 0x0000140A,
        GL_PROXY_TEXTURE_1D = 0x00008063,
        GL_PROXY_TEXTURE_2D = 0x00008064,
        GL_R3_G3_B2 = 0x00002A10,
        GL_RGB4 = 0x0000804F,
        GL_RGB5 = 0x00008050,
        GL_RGB8 = 0x00008051,
        GL_RGB10 = 0x00008052,
        GL_RGB12 = 0x00008053,
        GL_RGB16 = 0x00008054,
        GL_RGBA2 = 0x00008055,
        GL_RGBA4 = 0x00008056,
        GL_RGB5_A1 = 0x00008057,
        GL_RGBA8 = 0x00008058,
        GL_RGB10_A2 = 0x00008059,
        GL_RGBA12 = 0x0000805A,
        GL_RGBA16 = 0x0000805B,
        GL_UNSIGNED_BYTE_3_3_2 = 0x00008032,
        GL_UNSIGNED_SHORT_4_4_4_4 = 0x00008033,
        GL_UNSIGNED_SHORT_5_5_5_1 = 0x00008034,
        GL_UNSIGNED_INT_8_8_8_8 = 0x00008035,
        GL_UNSIGNED_INT_10_10_10_2 = 0x00008036,
        GL_TEXTURE_BINDING_3D = 0x0000806A,
        GL_PACK_SKIP_IMAGES = 0x0000806B,
        GL_PACK_IMAGE_HEIGHT = 0x0000806C,
        GL_UNPACK_SKIP_IMAGES = 0x0000806D,
        GL_UNPACK_IMAGE_HEIGHT = 0x0000806E,
        GL_TEXTURE_3D = 0x0000806F,
        GL_PROXY_TEXTURE_3D = 0x00008070,
        GL_TEXTURE_DEPTH = 0x00008071,
        GL_TEXTURE_WRAP_R = 0x00008072,
        GL_MAX_3D_TEXTURE_SIZE = 0x00008073,
        GL_UNSIGNED_BYTE_2_3_3_REV = 0x00008362,
        GL_UNSIGNED_SHORT_5_6_5 = 0x00008363,
        GL_UNSIGNED_SHORT_5_6_5_REV = 0x00008364,
        GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x00008365,
        GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x00008366,
        GL_UNSIGNED_INT_8_8_8_8_REV = 0x00008367,
        GL_UNSIGNED_INT_2_10_10_10_REV = 0x00008368,
        GL_BGR = 0x000080E0,
        GL_BGRA = 0x000080E1,
        GL_MAX_ELEMENTS_VERTICES = 0x000080E8,
        GL_MAX_ELEMENTS_INDICES = 0x000080E9,
        GL_CLAMP_TO_EDGE = 0x0000812F,
        GL_TEXTURE_MIN_LOD = 0x0000813A,
        GL_TEXTURE_MAX_LOD = 0x0000813B,
        GL_TEXTURE_BASE_LEVEL = 0x0000813C,
        GL_TEXTURE_MAX_LEVEL = 0x0000813D,
        GL_SMOOTH_POINT_SIZE_RANGE = 0x00000B12,
        GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x00000B13,
        GL_SMOOTH_LINE_WIDTH_RANGE = 0x00000B22,
        GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x00000B23,
        GL_ALIASED_LINE_WIDTH_RANGE = 0x0000846E,
        GL_TEXTURE0 = 0x000084C0,
        GL_TEXTURE1 = 0x000084C1,
        GL_TEXTURE2 = 0x000084C2,
        GL_TEXTURE3 = 0x000084C3,
        GL_TEXTURE4 = 0x000084C4,
        GL_TEXTURE5 = 0x000084C5,
        GL_TEXTURE6 = 0x000084C6,
        GL_TEXTURE7 = 0x000084C7,
        GL_TEXTURE8 = 0x000084C8,
        GL_TEXTURE9 = 0x000084C9,
        GL_TEXTURE10 = 0x000084CA,
        GL_TEXTURE11 = 0x000084CB,
        GL_TEXTURE12 = 0x000084CC,
        GL_TEXTURE13 = 0x000084CD,
        GL_TEXTURE14 = 0x000084CE,
        GL_TEXTURE15 = 0x000084CF,
        GL_TEXTURE16 = 0x000084D0,
        GL_TEXTURE17 = 0x000084D1,
        GL_TEXTURE18 = 0x000084D2,
        GL_TEXTURE19 = 0x000084D3,
        GL_TEXTURE20 = 0x000084D4,
        GL_TEXTURE21 = 0x000084D5,
        GL_TEXTURE22 = 0x000084D6,
        GL_TEXTURE23 = 0x000084D7,
        GL_TEXTURE24 = 0x000084D8,
        GL_TEXTURE25 = 0x000084D9,
        GL_TEXTURE26 = 0x000084DA,
        GL_TEXTURE27 = 0x000084DB,
        GL_TEXTURE28 = 0x000084DC,
        GL_TEXTURE29 = 0x000084DD,
        GL_TEXTURE30 = 0x000084DE,
        GL_TEXTURE31 = 0x000084DF,
        GL_ACTIVE_TEXTURE = 0x000084E0,
        GL_MULTISAMPLE = 0x0000809D,
        GL_SAMPLE_ALPHA_TO_COVERAGE = 0x0000809E,
        GL_SAMPLE_ALPHA_TO_ONE = 0x0000809F,
        GL_SAMPLE_COVERAGE = 0x000080A0,
        GL_SAMPLE_BUFFERS = 0x000080A8,
        GL_SAMPLES = 0x000080A9,
        GL_SAMPLE_COVERAGE_VALUE = 0x000080AA,
        GL_SAMPLE_COVERAGE_INVERT = 0x000080AB,
        GL_TEXTURE_CUBE_MAP = 0x00008513,
        GL_TEXTURE_BINDING_CUBE_MAP = 0x00008514,
        GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x00008515,
        GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x00008516,
        GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x00008517,
        GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x00008518,
        GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x00008519,
        GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x0000851A,
        GL_PROXY_TEXTURE_CUBE_MAP = 0x0000851B,
        GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x0000851C,
        GL_COMPRESSED_RGB = 0x000084ED,
        GL_COMPRESSED_RGBA = 0x000084EE,
        GL_TEXTURE_COMPRESSION_HINT = 0x000084EF,
        GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x000086A0,
        GL_TEXTURE_COMPRESSED = 0x000086A1,
        GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x000086A2,
        GL_COMPRESSED_TEXTURE_FORMATS = 0x000086A3,
        GL_CLAMP_TO_BORDER = 0x0000812D,
        GL_BLEND_DST_RGB = 0x000080C8,
        GL_BLEND_SRC_RGB = 0x000080C9,
        GL_BLEND_DST_ALPHA = 0x000080CA,
        GL_BLEND_SRC_ALPHA = 0x000080CB,
        GL_POINT_FADE_THRESHOLD_SIZE = 0x00008128,
        GL_DEPTH_COMPONENT16 = 0x000081A5,
        GL_DEPTH_COMPONENT24 = 0x000081A6,
        GL_DEPTH_COMPONENT32 = 0x000081A7,
        GL_MIRRORED_REPEAT = 0x00008370,
        GL_MAX_TEXTURE_LOD_BIAS = 0x000084FD,
        GL_TEXTURE_LOD_BIAS = 0x00008501,
        GL_INCR_WRAP = 0x00008507,
        GL_DECR_WRAP = 0x00008508,
        GL_TEXTURE_DEPTH_SIZE = 0x0000884A,
        GL_TEXTURE_COMPARE_MODE = 0x0000884C,
        GL_TEXTURE_COMPARE_FUNC = 0x0000884D,
        GL_BLEND_COLOR = 0x00008005,
        GL_BLEND_EQUATION = 0x00008009,
        GL_CONSTANT_COLOR = 0x00008001,
        GL_ONE_MINUS_CONSTANT_COLOR = 0x00008002,
        GL_CONSTANT_ALPHA = 0x00008003,
        GL_ONE_MINUS_CONSTANT_ALPHA = 0x00008004,
        GL_FUNC_ADD = 0x00008006,
        GL_FUNC_REVERSE_SUBTRACT = 0x0000800B,
        GL_FUNC_SUBTRACT = 0x0000800A,
        GL_MIN = 0x00008007,
        GL_MAX = 0x00008008,
        GL_BUFFER_SIZE = 0x00008764,
        GL_BUFFER_USAGE = 0x00008765,
        GL_QUERY_COUNTER_BITS = 0x00008864,
        GL_CURRENT_QUERY = 0x00008865,
        GL_QUERY_RESULT = 0x00008866,
        GL_QUERY_RESULT_AVAILABLE = 0x00008867,
        GL_ARRAY_BUFFER = 0x00008892,
        GL_ELEMENT_ARRAY_BUFFER = 0x00008893,
        GL_ARRAY_BUFFER_BINDING = 0x00008894,
        GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x00008895,
        GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x0000889F,
        GL_READ_ONLY = 0x000088B8,
        GL_WRITE_ONLY = 0x000088B9,
        GL_READ_WRITE = 0x000088BA,
        GL_BUFFER_ACCESS = 0x000088BB,
        GL_BUFFER_MAPPED = 0x000088BC,
        GL_BUFFER_MAP_POINTER = 0x000088BD,
        GL_STREAM_DRAW = 0x000088E0,
        GL_STREAM_READ = 0x000088E1,
        GL_STREAM_COPY = 0x000088E2,
        GL_STATIC_DRAW = 0x000088E4,
        GL_STATIC_READ = 0x000088E5,
        GL_STATIC_COPY = 0x000088E6,
        GL_DYNAMIC_DRAW = 0x000088E8,
        GL_DYNAMIC_READ = 0x000088E9,
        GL_DYNAMIC_COPY = 0x000088EA,
        GL_SAMPLES_PASSED = 0x00008914,
        GL_SRC1_ALPHA = 0x00008589,
        GL_BLEND_EQUATION_RGB = 0x00008009,
        GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622,
        GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623,
        GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624,
        GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625,
        GL_CURRENT_VERTEX_ATTRIB = 0x00008626,
        GL_VERTEX_PROGRAM_POINT_SIZE = 0x00008642,
        GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x00008645,
        GL_STENCIL_BACK_FUNC = 0x00008800,
        GL_STENCIL_BACK_FAIL = 0x00008801,
        GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x00008802,
        GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x00008803,
        GL_MAX_DRAW_BUFFERS = 0x00008824,
        GL_DRAW_BUFFER0 = 0x00008825,
        GL_DRAW_BUFFER1 = 0x00008826,
        GL_DRAW_BUFFER2 = 0x00008827,
        GL_DRAW_BUFFER3 = 0x00008828,
        GL_DRAW_BUFFER4 = 0x00008829,
        GL_DRAW_BUFFER5 = 0x0000882A,
        GL_DRAW_BUFFER6 = 0x0000882B,
        GL_DRAW_BUFFER7 = 0x0000882C,
        GL_DRAW_BUFFER8 = 0x0000882D,
        GL_DRAW_BUFFER9 = 0x0000882E,
        GL_DRAW_BUFFER10 = 0x0000882F,
        GL_DRAW_BUFFER11 = 0x00008830,
        GL_DRAW_BUFFER12 = 0x00008831,
        GL_DRAW_BUFFER13 = 0x00008832,
        GL_DRAW_BUFFER14 = 0x00008833,
        GL_DRAW_BUFFER15 = 0x00008834,
        GL_BLEND_EQUATION_ALPHA = 0x0000883D,
        GL_MAX_VERTEX_ATTRIBS = 0x00008869,
        GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886A,
        GL_MAX_TEXTURE_IMAGE_UNITS = 0x00008872,
        GL_FRAGMENT_SHADER = 0x00008B30,
        GL_VERTEX_SHADER = 0x00008B31,
        GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x00008B49,
        GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x00008B4A,
        GL_MAX_VARYING_FLOATS = 0x00008B4B,
        GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x00008B4C,
        GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x00008B4D,
        GL_SHADER_TYPE = 0x00008B4F,
        GL_FLOAT_VEC2 = 0x00008B50,
        GL_FLOAT_VEC3 = 0x00008B51,
        GL_FLOAT_VEC4 = 0x00008B52,
        GL_INT_VEC2 = 0x00008B53,
        GL_INT_VEC3 = 0x00008B54,
        GL_INT_VEC4 = 0x00008B55,
        GL_BOOL = 0x00008B56,
        GL_BOOL_VEC2 = 0x00008B57,
        GL_BOOL_VEC3 = 0x00008B58,
        GL_BOOL_VEC4 = 0x00008B59,
        GL_FLOAT_MAT2 = 0x00008B5A,
        GL_FLOAT_MAT3 = 0x00008B5B,
        GL_FLOAT_MAT4 = 0x00008B5C,
        GL_SAMPLER_1D = 0x00008B5D,
        GL_SAMPLER_2D = 0x00008B5E,
        GL_SAMPLER_3D = 0x00008B5F,
        GL_SAMPLER_CUBE = 0x00008B60,
        GL_SAMPLER_1D_SHADOW = 0x00008B61,
        GL_SAMPLER_2D_SHADOW = 0x00008B62,
        GL_DELETE_STATUS = 0x00008B80,
        GL_COMPILE_STATUS = 0x00008B81,
        GL_LINK_STATUS = 0x00008B82,
        GL_VALIDATE_STATUS = 0x00008B83,
        GL_INFO_LOG_LENGTH = 0x00008B84,
        GL_ATTACHED_SHADERS = 0x00008B85,
        GL_ACTIVE_UNIFORMS = 0x00008B86,
        GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x00008B87,
        GL_SHADER_SOURCE_LENGTH = 0x00008B88,
        GL_ACTIVE_ATTRIBUTES = 0x00008B89,
        GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x00008B8A,
        GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x00008B8B,
        GL_SHADING_LANGUAGE_VERSION = 0x00008B8C,
        GL_CURRENT_PROGRAM = 0x00008B8D,
        GL_POINT_SPRITE_COORD_ORIGIN = 0x00008CA0,
        GL_LOWER_LEFT = 0x00008CA1,
        GL_UPPER_LEFT = 0x00008CA2,
        GL_STENCIL_BACK_REF = 0x00008CA3,
        GL_STENCIL_BACK_VALUE_MASK = 0x00008CA4,
        GL_STENCIL_BACK_WRITEMASK = 0x00008CA5,
        GL_PIXEL_PACK_BUFFER = 0x000088EB,
        GL_PIXEL_UNPACK_BUFFER = 0x000088EC,
        GL_PIXEL_PACK_BUFFER_BINDING = 0x000088ED,
        GL_PIXEL_UNPACK_BUFFER_BINDING = 0x000088EF,
        GL_FLOAT_MAT2x3 = 0x00008B65,
        GL_FLOAT_MAT2x4 = 0x00008B66,
        GL_FLOAT_MAT3x2 = 0x00008B67,
        GL_FLOAT_MAT3x4 = 0x00008B68,
        GL_FLOAT_MAT4x2 = 0x00008B69,
        GL_FLOAT_MAT4x3 = 0x00008B6A,
        GL_SRGB = 0x00008C40,
        GL_SRGB8 = 0x00008C41,
        GL_SRGB_ALPHA = 0x00008C42,
        GL_SRGB8_ALPHA8 = 0x00008C43,
        GL_COMPRESSED_SRGB = 0x00008C48,
        GL_COMPRESSED_SRGB_ALPHA = 0x00008C49,
        GL_COMPARE_REF_TO_TEXTURE = 0x0000884E,
        GL_CLIP_DISTANCE0 = 0x00003000,
        GL_CLIP_DISTANCE1 = 0x00003001,
        GL_CLIP_DISTANCE2 = 0x00003002,
        GL_CLIP_DISTANCE3 = 0x00003003,
        GL_CLIP_DISTANCE4 = 0x00003004,
        GL_CLIP_DISTANCE5 = 0x00003005,
        GL_CLIP_DISTANCE6 = 0x00003006,
        GL_CLIP_DISTANCE7 = 0x00003007,
        GL_MAX_CLIP_DISTANCES = 0x00000D32,
        GL_MAJOR_VERSION = 0x0000821B,
        GL_MINOR_VERSION = 0x0000821C,
        GL_NUM_EXTENSIONS = 0x0000821D,
        GL_CONTEXT_FLAGS = 0x0000821E,
        GL_COMPRESSED_RED = 0x00008225,
        GL_COMPRESSED_RG = 0x00008226,
        GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001,
        GL_RGBA32F = 0x00008814,
        GL_RGB32F = 0x00008815,
        GL_RGBA16F = 0x0000881A,
        GL_RGB16F = 0x0000881B,
        GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x000088FD,
        GL_MAX_ARRAY_TEXTURE_LAYERS = 0x000088FF,
        GL_MIN_PROGRAM_TEXEL_OFFSET = 0x00008904,
        GL_MAX_PROGRAM_TEXEL_OFFSET = 0x00008905,
        GL_CLAMP_READ_COLOR = 0x0000891C,
        GL_FIXED_ONLY = 0x0000891D,
        GL_MAX_VARYING_COMPONENTS = 0x00008B4B,
        GL_TEXTURE_1D_ARRAY = 0x00008C18,
        GL_PROXY_TEXTURE_1D_ARRAY = 0x00008C19,
        GL_TEXTURE_2D_ARRAY = 0x00008C1A,
        GL_PROXY_TEXTURE_2D_ARRAY = 0x00008C1B,
        GL_TEXTURE_BINDING_1D_ARRAY = 0x00008C1C,
        GL_TEXTURE_BINDING_2D_ARRAY = 0x00008C1D,
        GL_R11F_G11F_B10F = 0x00008C3A,
        GL_UNSIGNED_INT_10F_11F_11F_REV = 0x00008C3B,
        GL_RGB9_E5 = 0x00008C3D,
        GL_UNSIGNED_INT_5_9_9_9_REV = 0x00008C3E,
        GL_TEXTURE_SHARED_SIZE = 0x00008C3F,
        GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x00008C76,
        GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x00008C7F,
        GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x00008C80,
        GL_TRANSFORM_FEEDBACK_VARYINGS = 0x00008C83,
        GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x00008C84,
        GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x00008C85,
        GL_PRIMITIVES_GENERATED = 0x00008C87,
        GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x00008C88,
        GL_RASTERIZER_DISCARD = 0x00008C89,
        GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x00008C8A,
        GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x00008C8B,
        GL_INTERLEAVED_ATTRIBS = 0x00008C8C,
        GL_SEPARATE_ATTRIBS = 0x00008C8D,
        GL_TRANSFORM_FEEDBACK_BUFFER = 0x00008C8E,
        GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x00008C8F,
        GL_RGBA32UI = 0x00008D70,
        GL_RGB32UI = 0x00008D71,
        GL_RGBA16UI = 0x00008D76,
        GL_RGB16UI = 0x00008D77,
        GL_RGBA8UI = 0x00008D7C,
        GL_RGB8UI = 0x00008D7D,
        GL_RGBA32I = 0x00008D82,
        GL_RGB32I = 0x00008D83,
        GL_RGBA16I = 0x00008D88,
        GL_RGB16I = 0x00008D89,
        GL_RGBA8I = 0x00008D8E,
        GL_RGB8I = 0x00008D8F,
        GL_RED_INTEGER = 0x00008D94,
        GL_GREEN_INTEGER = 0x00008D95,
        GL_BLUE_INTEGER = 0x00008D96,
        GL_RGB_INTEGER = 0x00008D98,
        GL_RGBA_INTEGER = 0x00008D99,
        GL_BGR_INTEGER = 0x00008D9A,
        GL_BGRA_INTEGER = 0x00008D9B,
        GL_SAMPLER_1D_ARRAY = 0x00008DC0,
        GL_SAMPLER_2D_ARRAY = 0x00008DC1,
        GL_SAMPLER_1D_ARRAY_SHADOW = 0x00008DC3,
        GL_SAMPLER_2D_ARRAY_SHADOW = 0x00008DC4,
        GL_SAMPLER_CUBE_SHADOW = 0x00008DC5,
        GL_UNSIGNED_INT_VEC2 = 0x00008DC6,
        GL_UNSIGNED_INT_VEC3 = 0x00008DC7,
        GL_UNSIGNED_INT_VEC4 = 0x00008DC8,
        GL_INT_SAMPLER_1D = 0x00008DC9,
        GL_INT_SAMPLER_2D = 0x00008DCA,
        GL_INT_SAMPLER_3D = 0x00008DCB,
        GL_INT_SAMPLER_CUBE = 0x00008DCC,
        GL_INT_SAMPLER_1D_ARRAY = 0x00008DCE,
        GL_INT_SAMPLER_2D_ARRAY = 0x00008DCF,
        GL_UNSIGNED_INT_SAMPLER_1D = 0x00008DD1,
        GL_UNSIGNED_INT_SAMPLER_2D = 0x00008DD2,
        GL_UNSIGNED_INT_SAMPLER_3D = 0x00008DD3,
        GL_UNSIGNED_INT_SAMPLER_CUBE = 0x00008DD4,
        GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x00008DD6,
        GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x00008DD7,
        GL_QUERY_WAIT = 0x00008E13,
        GL_QUERY_NO_WAIT = 0x00008E14,
        GL_QUERY_BY_REGION_WAIT = 0x00008E15,
        GL_QUERY_BY_REGION_NO_WAIT = 0x00008E16,
        GL_BUFFER_ACCESS_FLAGS = 0x0000911F,
        GL_BUFFER_MAP_LENGTH = 0x00009120,
        GL_BUFFER_MAP_OFFSET = 0x00009121,
        GL_DEPTH_COMPONENT32F = 0x00008CAC,
        GL_DEPTH32F_STENCIL8 = 0x00008CAD,
        GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x00008DAD,
        GL_INVALID_FRAMEBUFFER_OPERATION = 0x00000506,
        GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x00008210,
        GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x00008211,
        GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x00008212,
        GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x00008213,
        GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x00008214,
        GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x00008215,
        GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x00008216,
        GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x00008217,
        GL_FRAMEBUFFER_DEFAULT = 0x00008218,
        GL_FRAMEBUFFER_UNDEFINED = 0x00008219,
        GL_DEPTH_STENCIL_ATTACHMENT = 0x0000821A,
        GL_MAX_RENDERBUFFER_SIZE = 0x000084E8,
        GL_DEPTH_STENCIL = 0x000084F9,
        GL_UNSIGNED_INT_24_8 = 0x000084FA,
        GL_DEPTH24_STENCIL8 = 0x000088F0,
        GL_TEXTURE_STENCIL_SIZE = 0x000088F1,
        GL_TEXTURE_RED_TYPE = 0x00008C10,
        GL_TEXTURE_GREEN_TYPE = 0x00008C11,
        GL_TEXTURE_BLUE_TYPE = 0x00008C12,
        GL_TEXTURE_ALPHA_TYPE = 0x00008C13,
        GL_TEXTURE_DEPTH_TYPE = 0x00008C16,
        GL_UNSIGNED_NORMALIZED = 0x00008C17,
        GL_FRAMEBUFFER_BINDING = 0x00008CA6,
        GL_DRAW_FRAMEBUFFER_BINDING = 0x00008CA6,
        GL_RENDERBUFFER_BINDING = 0x00008CA7,
        GL_READ_FRAMEBUFFER = 0x00008CA8,
        GL_DRAW_FRAMEBUFFER = 0x00008CA9,
        GL_READ_FRAMEBUFFER_BINDING = 0x00008CAA,
        GL_RENDERBUFFER_SAMPLES = 0x00008CAB,
        GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x00008CD0,
        GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x00008CD1,
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x00008CD2,
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x00008CD3,
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x00008CD4,
        GL_FRAMEBUFFER_COMPLETE = 0x00008CD5,
        GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x00008CD6,
        GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x00008CD7,
        GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x00008CDB,
        GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x00008CDC,
        GL_FRAMEBUFFER_UNSUPPORTED = 0x00008CDD,
        GL_MAX_COLOR_ATTACHMENTS = 0x00008CDF,
        GL_COLOR_ATTACHMENT0 = 0x00008CE0,
        GL_COLOR_ATTACHMENT1 = 0x00008CE1,
        GL_COLOR_ATTACHMENT2 = 0x00008CE2,
        GL_COLOR_ATTACHMENT3 = 0x00008CE3,
        GL_COLOR_ATTACHMENT4 = 0x00008CE4,
        GL_COLOR_ATTACHMENT5 = 0x00008CE5,
        GL_COLOR_ATTACHMENT6 = 0x00008CE6,
        GL_COLOR_ATTACHMENT7 = 0x00008CE7,
        GL_COLOR_ATTACHMENT8 = 0x00008CE8,
        GL_COLOR_ATTACHMENT9 = 0x00008CE9,
        GL_COLOR_ATTACHMENT10 = 0x00008CEA,
        GL_COLOR_ATTACHMENT11 = 0x00008CEB,
        GL_COLOR_ATTACHMENT12 = 0x00008CEC,
        GL_COLOR_ATTACHMENT13 = 0x00008CED,
        GL_COLOR_ATTACHMENT14 = 0x00008CEE,
        GL_COLOR_ATTACHMENT15 = 0x00008CEF,
        GL_COLOR_ATTACHMENT16 = 0x00008CF0,
        GL_COLOR_ATTACHMENT17 = 0x00008CF1,
        GL_COLOR_ATTACHMENT18 = 0x00008CF2,
        GL_COLOR_ATTACHMENT19 = 0x00008CF3,
        GL_COLOR_ATTACHMENT20 = 0x00008CF4,
        GL_COLOR_ATTACHMENT21 = 0x00008CF5,
        GL_COLOR_ATTACHMENT22 = 0x00008CF6,
        GL_COLOR_ATTACHMENT23 = 0x00008CF7,
        GL_COLOR_ATTACHMENT24 = 0x00008CF8,
        GL_COLOR_ATTACHMENT25 = 0x00008CF9,
        GL_COLOR_ATTACHMENT26 = 0x00008CFA,
        GL_COLOR_ATTACHMENT27 = 0x00008CFB,
        GL_COLOR_ATTACHMENT28 = 0x00008CFC,
        GL_COLOR_ATTACHMENT29 = 0x00008CFD,
        GL_COLOR_ATTACHMENT30 = 0x00008CFE,
        GL_COLOR_ATTACHMENT31 = 0x00008CFF,
        GL_DEPTH_ATTACHMENT = 0x00008D00,
        GL_STENCIL_ATTACHMENT = 0x00008D20,
        GL_FRAMEBUFFER = 0x00008D40,
        GL_RENDERBUFFER = 0x00008D41,
        GL_RENDERBUFFER_WIDTH = 0x00008D42,
        GL_RENDERBUFFER_HEIGHT = 0x00008D43,
        GL_RENDERBUFFER_INTERNAL_FORMAT = 0x00008D44,
        GL_STENCIL_INDEX1 = 0x00008D46,
        GL_STENCIL_INDEX4 = 0x00008D47,
        GL_STENCIL_INDEX8 = 0x00008D48,
        GL_STENCIL_INDEX16 = 0x00008D49,
        GL_RENDERBUFFER_RED_SIZE = 0x00008D50,
        GL_RENDERBUFFER_GREEN_SIZE = 0x00008D51,
        GL_RENDERBUFFER_BLUE_SIZE = 0x00008D52,
        GL_RENDERBUFFER_ALPHA_SIZE = 0x00008D53,
        GL_RENDERBUFFER_DEPTH_SIZE = 0x00008D54,
        GL_RENDERBUFFER_STENCIL_SIZE = 0x00008D55,
        GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x00008D56,
        GL_MAX_SAMPLES = 0x00008D57,
        GL_FRAMEBUFFER_SRGB = 0x00008DB9,
        GL_HALF_FLOAT = 0x0000140B,
        GL_MAP_READ_BIT = 0x00000001,
        GL_MAP_WRITE_BIT = 0x00000002,
        GL_MAP_INVALIDATE_RANGE_BIT = 0x00000004,
        GL_MAP_INVALIDATE_BUFFER_BIT = 0x00000008,
        GL_MAP_FLUSH_EXPLICIT_BIT = 0x00000010,
        GL_MAP_UNSYNCHRONIZED_BIT = 0x00000020,
        GL_COMPRESSED_RED_RGTC1 = 0x00008DBB,
        GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x00008DBC,
        GL_COMPRESSED_RG_RGTC2 = 0x00008DBD,
        GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x00008DBE,
        GL_RG = 0x00008227,
        GL_RG_INTEGER = 0x00008228,
        GL_R8 = 0x00008229,
        GL_R16 = 0x0000822A,
        GL_RG8 = 0x0000822B,
        GL_RG16 = 0x0000822C,
        GL_R16F = 0x0000822D,
        GL_R32F = 0x0000822E,
        GL_RG16F = 0x0000822F,
        GL_RG32F = 0x00008230,
        GL_R8I = 0x00008231,
        GL_R8UI = 0x00008232,
        GL_R16I = 0x00008233,
        GL_R16UI = 0x00008234,
        GL_R32I = 0x00008235,
        GL_R32UI = 0x00008236,
        GL_RG8I = 0x00008237,
        GL_RG8UI = 0x00008238,
        GL_RG16I = 0x00008239,
        GL_RG16UI = 0x0000823A,
        GL_RG32I = 0x0000823B,
        GL_RG32UI = 0x0000823C,
        GL_VERTEX_ARRAY_BINDING = 0x000085B5,
        GL_SAMPLER_2D_RECT = 0x00008B63,
        GL_SAMPLER_2D_RECT_SHADOW = 0x00008B64,
        GL_SAMPLER_BUFFER = 0x00008DC2,
        GL_INT_SAMPLER_2D_RECT = 0x00008DCD,
        GL_INT_SAMPLER_BUFFER = 0x00008DD0,
        GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x00008DD5,
        GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8,
        GL_TEXTURE_BUFFER = 0x00008C2A,
        GL_MAX_TEXTURE_BUFFER_SIZE = 0x00008C2B,
        GL_TEXTURE_BINDING_BUFFER = 0x00008C2C,
        GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x00008C2D,
        GL_TEXTURE_RECTANGLE = 0x000084F5,
        GL_TEXTURE_BINDING_RECTANGLE = 0x000084F6,
        GL_PROXY_TEXTURE_RECTANGLE = 0x000084F7,
        GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x000084F8,
        GL_R8_SNORM = 0x00008F94,
        GL_RG8_SNORM = 0x00008F95,
        GL_RGB8_SNORM = 0x00008F96,
        GL_RGBA8_SNORM = 0x00008F97,
        GL_R16_SNORM = 0x00008F98,
        GL_RG16_SNORM = 0x00008F99,
        GL_RGB16_SNORM = 0x00008F9A,
        GL_RGBA16_SNORM = 0x00008F9B,
        GL_SIGNED_NORMALIZED = 0x00008F9C,
        GL_PRIMITIVE_RESTART = 0x00008F9D,
        GL_PRIMITIVE_RESTART_INDEX = 0x00008F9E,
        GL_COPY_READ_BUFFER = 0x00008F36,
        GL_COPY_WRITE_BUFFER = 0x00008F37,
        GL_UNIFORM_BUFFER = 0x00008A11,
        GL_UNIFORM_BUFFER_BINDING = 0x00008A28,
        GL_UNIFORM_BUFFER_START = 0x00008A29,
        GL_UNIFORM_BUFFER_SIZE = 0x00008A2A,
        GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x00008A2B,
        GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x00008A2C,
        GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x00008A2D,
        GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x00008A2E,
        GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x00008A2F,
        GL_MAX_UNIFORM_BLOCK_SIZE = 0x00008A30,
        GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x00008A31,
        GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x00008A32,
        GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x00008A33,
        GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x00008A34,
        GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x00008A35,
        GL_ACTIVE_UNIFORM_BLOCKS = 0x00008A36,
        GL_UNIFORM_TYPE = 0x00008A37,
        GL_UNIFORM_SIZE = 0x00008A38,
        GL_UNIFORM_NAME_LENGTH = 0x00008A39,
        GL_UNIFORM_BLOCK_INDEX = 0x00008A3A,
        GL_UNIFORM_OFFSET = 0x00008A3B,
        GL_UNIFORM_ARRAY_STRIDE = 0x00008A3C,
        GL_UNIFORM_MATRIX_STRIDE = 0x00008A3D,
        GL_UNIFORM_IS_ROW_MAJOR = 0x00008A3E,
        GL_UNIFORM_BLOCK_BINDING = 0x00008A3F,
        GL_UNIFORM_BLOCK_DATA_SIZE = 0x00008A40,
        GL_UNIFORM_BLOCK_NAME_LENGTH = 0x00008A41,
        GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x00008A42,
        GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x00008A43,
        GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x00008A44,
        GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x00008A45,
        GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x00008A46,
        GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001,
        GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002,
        GL_LINES_ADJACENCY = 0x0000000A,
        GL_LINE_STRIP_ADJACENCY = 0x0000000B,
        GL_TRIANGLES_ADJACENCY = 0x0000000C,
        GL_TRIANGLE_STRIP_ADJACENCY = 0x0000000D,
        GL_PROGRAM_POINT_SIZE = 0x00008642,
        GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x00008C29,
        GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x00008DA7,
        GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x00008DA8,
        GL_GEOMETRY_SHADER = 0x00008DD9,
        GL_GEOMETRY_VERTICES_OUT = 0x00008916,
        GL_GEOMETRY_INPUT_TYPE = 0x00008917,
        GL_GEOMETRY_OUTPUT_TYPE = 0x00008918,
        GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x00008DDF,
        GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x00008DE0,
        GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x00008DE1,
        GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x00009122,
        GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x00009123,
        GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x00009124,
        GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x00009125,
        GL_CONTEXT_PROFILE_MASK = 0x00009126,
        GL_DEPTH_CLAMP = 0x0000864F,
        GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x00008E4C,
        GL_FIRST_VERTEX_CONVENTION = 0x00008E4D,
        GL_LAST_VERTEX_CONVENTION = 0x00008E4E,
        GL_PROVOKING_VERTEX = 0x00008E4F,
        GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x0000884F,
        GL_MAX_SERVER_WAIT_TIMEOUT = 0x00009111,
        GL_OBJECT_TYPE = 0x00009112,
        GL_SYNC_CONDITION = 0x00009113,
        GL_SYNC_STATUS = 0x00009114,
        GL_SYNC_FLAGS = 0x00009115,
        GL_SYNC_FENCE = 0x00009116,
        GL_SYNC_GPU_COMMANDS_COMPLETE = 0x00009117,
        GL_UNSIGNALED = 0x00009118,
        GL_SIGNALED = 0x00009119,
        GL_ALREADY_SIGNALED = 0x0000911A,
        GL_TIMEOUT_EXPIRED = 0x0000911B,
        GL_CONDITION_SATISFIED = 0x0000911C,
        GL_WAIT_FAILED = 0x0000911D,
        GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001,
        GL_SAMPLE_POSITION = 0x00008E50,
        GL_SAMPLE_MASK = 0x00008E51,
        GL_SAMPLE_MASK_VALUE = 0x00008E52,
        GL_MAX_SAMPLE_MASK_WORDS = 0x00008E59,
        GL_TEXTURE_2D_MULTISAMPLE = 0x00009100,
        GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x00009101,
        GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102,
        GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009103,
        GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x00009104,
        GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105,
        GL_TEXTURE_SAMPLES = 0x00009106,
        GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x00009107,
        GL_SAMPLER_2D_MULTISAMPLE = 0x00009108,
        GL_INT_SAMPLER_2D_MULTISAMPLE = 0x00009109,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A,
        GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B,
        GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D,
        GL_MAX_COLOR_TEXTURE_SAMPLES = 0x0000910E,
        GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x0000910F,
        GL_MAX_INTEGER_SAMPLES = 0x00009110,
        GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x000088FE,
        GL_SRC1_COLOR = 0x000088F9,
        GL_ONE_MINUS_SRC1_COLOR = 0x000088FA,
        GL_ONE_MINUS_SRC1_ALPHA = 0x000088FB,
        GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x000088FC,
        GL_ANY_SAMPLES_PASSED = 0x00008C2F,
        GL_SAMPLER_BINDING = 0x00008919,
        GL_RGB10_A2UI = 0x0000906F,
        GL_TEXTURE_SWIZZLE_R = 0x00008E42,
        GL_TEXTURE_SWIZZLE_G = 0x00008E43,
        GL_TEXTURE_SWIZZLE_B = 0x00008E44,
        GL_TEXTURE_SWIZZLE_A = 0x00008E45,
        GL_TEXTURE_SWIZZLE_RGBA = 0x00008E46,
        GL_TIME_ELAPSED = 0x000088BF,
        GL_TIMESTAMP = 0x00008E28,
        GL_INT_2_10_10_10_REV = 0x00008D9F,
        GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x000083F0,
        GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x000083F1,
        GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x000083F2,
        GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x000083F3,
        GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x00008242,
        GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x00008243,
        GL_DEBUG_CALLBACK_FUNCTION = 0x00008244,
        GL_DEBUG_CALLBACK_USER_PARAM = 0x00008245,
        GL_DEBUG_SOURCE_API = 0x00008246,
        GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x00008247,
        GL_DEBUG_SOURCE_SHADER_COMPILER = 0x00008248,
        GL_DEBUG_SOURCE_THIRD_PARTY = 0x00008249,
        GL_DEBUG_SOURCE_APPLICATION = 0x0000824A,
        GL_DEBUG_SOURCE_OTHER = 0x0000824B,
        GL_DEBUG_TYPE_ERROR = 0x0000824C,
        GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x0000824D,
        GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x0000824E,
        GL_DEBUG_TYPE_PORTABILITY = 0x0000824F,
        GL_DEBUG_TYPE_PERFORMANCE = 0x00008250,
        GL_DEBUG_TYPE_OTHER = 0x00008251,
        GL_DEBUG_TYPE_MARKER = 0x00008268,
        GL_DEBUG_TYPE_PUSH_GROUP = 0x00008269,
        GL_DEBUG_TYPE_POP_GROUP = 0x0000826A,
        GL_DEBUG_SEVERITY_NOTIFICATION = 0x0000826B,
        GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x0000826C,
        GL_DEBUG_GROUP_STACK_DEPTH = 0x0000826D,
        GL_BUFFER = 0x000082E0,
        GL_SHADER = 0x000082E1,
        GL_PROGRAM = 0x000082E2,
        GL_VERTEX_ARRAY = 0x00008074,
        GL_QUERY = 0x000082E3,
        GL_PROGRAM_PIPELINE = 0x000082E4,
        GL_SAMPLER = 0x000082E6,
        GL_MAX_LABEL_LENGTH = 0x000082E8,
        GL_MAX_DEBUG_MESSAGE_LENGTH = 0x00009143,
        GL_MAX_DEBUG_LOGGED_MESSAGES = 0x00009144,
        GL_DEBUG_LOGGED_MESSAGES = 0x00009145,
        GL_DEBUG_SEVERITY_HIGH = 0x00009146,
        GL_DEBUG_SEVERITY_MEDIUM = 0x00009147,
        GL_DEBUG_SEVERITY_LOW = 0x00009148,
        GL_DEBUG_OUTPUT = 0x000092E0,
        GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002,
        GL_STACK_OVERFLOW = 0x00000503,
        GL_STACK_UNDERFLOW = 0x00000504,
        GL_DISPLAY_LIST = 0x000082E7,
    }

    public static DelegateTypes.glCullFace glCullFace;
    public static DelegateTypes.glFrontFace glFrontFace;
    public static DelegateTypes.glHint glHint;
    public static DelegateTypes.glLineWidth glLineWidth;
    public static DelegateTypes.glPointSize glPointSize;
    public static DelegateTypes.glPolygonMode glPolygonMode;
    public static DelegateTypes.glScissor glScissor;
    public static DelegateTypes.glTexParameterf glTexParameterf;
    public static DelegateTypes.glTexParameterfv glTexParameterfv;
    public static DelegateTypes.glTexParameteri glTexParameteri;
    public static DelegateTypes.glTexParameteriv glTexParameteriv;
    public static DelegateTypes.glTexImage1D glTexImage1D;
    public static DelegateTypes.glTexImage2D glTexImage2D;
    public static DelegateTypes.glDrawBuffer glDrawBuffer;
    public static DelegateTypes.glClear glClear;
    public static DelegateTypes.glClearColor glClearColor;
    public static DelegateTypes.glClearStencil glClearStencil;
    public static DelegateTypes.glClearDepth glClearDepth;
    public static DelegateTypes.glStencilMask glStencilMask;
    public static DelegateTypes.glColorMask glColorMask;
    public static DelegateTypes.glDepthMask glDepthMask;
    public static DelegateTypes.glDisable glDisable;
    public static DelegateTypes.glEnable glEnable;
    public static DelegateTypes.glFinish glFinish;
    public static DelegateTypes.glFlush glFlush;
    public static DelegateTypes.glBlendFunc glBlendFunc;
    public static DelegateTypes.glLogicOp glLogicOp;
    public static DelegateTypes.glStencilFunc glStencilFunc;
    public static DelegateTypes.glStencilOp glStencilOp;
    public static DelegateTypes.glDepthFunc glDepthFunc;
    public static DelegateTypes.glPixelStoref glPixelStoref;
    public static DelegateTypes.glPixelStorei glPixelStorei;
    public static DelegateTypes.glReadBuffer glReadBuffer;
    public static DelegateTypes.glReadPixels glReadPixels;
    public static DelegateTypes.glGetBooleanv glGetBooleanv;
    public static DelegateTypes.glGetDoublev glGetDoublev;
    public static DelegateTypes.glGetError glGetError;
    public static DelegateTypes.glGetFloatv glGetFloatv;
    public static DelegateTypes.glGetIntegerv glGetIntegerv;
    public static DelegateTypes.glGetString glGetString;
    public static DelegateTypes.glGetTexImage glGetTexImage;
    public static DelegateTypes.glGetTexParameterfv glGetTexParameterfv;
    public static DelegateTypes.glGetTexParameteriv glGetTexParameteriv;
    public static DelegateTypes.glGetTexLevelParameterfv glGetTexLevelParameterfv;
    public static DelegateTypes.glGetTexLevelParameteriv glGetTexLevelParameteriv;
    public static DelegateTypes.glIsEnabled glIsEnabled;
    public static DelegateTypes.glDepthRange glDepthRange;
    public static DelegateTypes.glViewport glViewport;
    public static DelegateTypes.glDrawArrays glDrawArrays;
    public static DelegateTypes.glDrawElements glDrawElements;
    public static DelegateTypes.glPolygonOffset glPolygonOffset;
    public static DelegateTypes.glCopyTexImage1D glCopyTexImage1D;
    public static DelegateTypes.glCopyTexImage2D glCopyTexImage2D;
    public static DelegateTypes.glCopyTexSubImage1D glCopyTexSubImage1D;
    public static DelegateTypes.glCopyTexSubImage2D glCopyTexSubImage2D;
    public static DelegateTypes.glTexSubImage1D glTexSubImage1D;
    public static DelegateTypes.glTexSubImage2D glTexSubImage2D;
    public static DelegateTypes.glBindTexture glBindTexture;
    public static DelegateTypes.glDeleteTextures glDeleteTextures;
    public static DelegateTypes.glGenTextures glGenTextures;
    public static DelegateTypes.glIsTexture glIsTexture;
    public static DelegateTypes.glDrawRangeElements glDrawRangeElements;
    public static DelegateTypes.glTexImage3D glTexImage3D;
    public static DelegateTypes.glTexSubImage3D glTexSubImage3D;
    public static DelegateTypes.glCopyTexSubImage3D glCopyTexSubImage3D;
    public static DelegateTypes.glActiveTexture glActiveTexture;
    public static DelegateTypes.glSampleCoverage glSampleCoverage;
    public static DelegateTypes.glCompressedTexImage3D glCompressedTexImage3D;
    public static DelegateTypes.glCompressedTexImage2D glCompressedTexImage2D;
    public static DelegateTypes.glCompressedTexImage1D glCompressedTexImage1D;
    public static DelegateTypes.glCompressedTexSubImage3D glCompressedTexSubImage3D;
    public static DelegateTypes.glCompressedTexSubImage2D glCompressedTexSubImage2D;
    public static DelegateTypes.glCompressedTexSubImage1D glCompressedTexSubImage1D;
    public static DelegateTypes.glGetCompressedTexImage glGetCompressedTexImage;
    public static DelegateTypes.glBlendFuncSeparate glBlendFuncSeparate;
    public static DelegateTypes.glMultiDrawArrays glMultiDrawArrays;
    public static DelegateTypes.glMultiDrawElements glMultiDrawElements;
    public static DelegateTypes.glPointParameterf glPointParameterf;
    public static DelegateTypes.glPointParameterfv glPointParameterfv;
    public static DelegateTypes.glPointParameteri glPointParameteri;
    public static DelegateTypes.glPointParameteriv glPointParameteriv;
    public static DelegateTypes.glBlendColor glBlendColor;
    public static DelegateTypes.glBlendEquation glBlendEquation;
    public static DelegateTypes.glGenQueries glGenQueries;
    public static DelegateTypes.glDeleteQueries glDeleteQueries;
    public static DelegateTypes.glIsQuery glIsQuery;
    public static DelegateTypes.glBeginQuery glBeginQuery;
    public static DelegateTypes.glEndQuery glEndQuery;
    public static DelegateTypes.glGetQueryiv glGetQueryiv;
    public static DelegateTypes.glGetQueryObjectiv glGetQueryObjectiv;
    public static DelegateTypes.glGetQueryObjectuiv glGetQueryObjectuiv;
    public static DelegateTypes.glBindBuffer glBindBuffer;
    public static DelegateTypes.glDeleteBuffers glDeleteBuffers;
    public static DelegateTypes.glGenBuffers glGenBuffers;
    public static DelegateTypes.glIsBuffer glIsBuffer;
    public static DelegateTypes.glBufferData glBufferData;
    public static DelegateTypes.glBufferSubData glBufferSubData;
    public static DelegateTypes.glGetBufferSubData glGetBufferSubData;
    public static DelegateTypes.glMapBuffer glMapBuffer;
    public static DelegateTypes.glUnmapBuffer glUnmapBuffer;
    public static DelegateTypes.glGetBufferParameteriv glGetBufferParameteriv;
    public static DelegateTypes.glGetBufferPointerv glGetBufferPointerv;
    public static DelegateTypes.glBlendEquationSeparate glBlendEquationSeparate;
    public static DelegateTypes.glDrawBuffers glDrawBuffers;
    public static DelegateTypes.glStencilOpSeparate glStencilOpSeparate;
    public static DelegateTypes.glStencilFuncSeparate glStencilFuncSeparate;
    public static DelegateTypes.glStencilMaskSeparate glStencilMaskSeparate;
    public static DelegateTypes.glAttachShader glAttachShader;
    public static DelegateTypes.glBindAttribLocation glBindAttribLocation;
    public static DelegateTypes.glCompileShader glCompileShader;
    public static DelegateTypes.glCreateProgram glCreateProgram;
    public static DelegateTypes.glCreateShader glCreateShader;
    public static DelegateTypes.glDeleteProgram glDeleteProgram;
    public static DelegateTypes.glDeleteShader glDeleteShader;
    public static DelegateTypes.glDetachShader glDetachShader;
    public static DelegateTypes.glDisableVertexAttribArray glDisableVertexAttribArray;
    public static DelegateTypes.glEnableVertexAttribArray glEnableVertexAttribArray;
    public static DelegateTypes.glGetActiveAttrib glGetActiveAttrib;
    public static DelegateTypes.glGetActiveUniform glGetActiveUniform;
    public static DelegateTypes.glGetAttachedShaders glGetAttachedShaders;
    public static DelegateTypes.glGetAttribLocation glGetAttribLocation;
    public static DelegateTypes.glGetProgramiv glGetProgramiv;
    public static DelegateTypes.glGetProgramInfoLog glGetProgramInfoLog;
    public static DelegateTypes.glGetShaderiv glGetShaderiv;
    public static DelegateTypes.glGetShaderInfoLog glGetShaderInfoLog;
    public static DelegateTypes.glGetShaderSource glGetShaderSource;
    public static DelegateTypes.glGetUniformLocation glGetUniformLocation;
    public static DelegateTypes.glGetUniformfv glGetUniformfv;
    public static DelegateTypes.glGetUniformiv glGetUniformiv;
    public static DelegateTypes.glGetVertexAttribdv glGetVertexAttribdv;
    public static DelegateTypes.glGetVertexAttribfv glGetVertexAttribfv;
    public static DelegateTypes.glGetVertexAttribiv glGetVertexAttribiv;
    public static DelegateTypes.glGetVertexAttribPointerv glGetVertexAttribPointerv;
    public static DelegateTypes.glIsProgram glIsProgram;
    public static DelegateTypes.glIsShader glIsShader;
    public static DelegateTypes.glLinkProgram glLinkProgram;
    public static DelegateTypes.glShaderSource glShaderSource;
    public static DelegateTypes.glUseProgram glUseProgram;
    public static DelegateTypes.glUniform1f glUniform1f;
    public static DelegateTypes.glUniform2f glUniform2f;
    public static DelegateTypes.glUniform3f glUniform3f;
    public static DelegateTypes.glUniform4f glUniform4f;
    public static DelegateTypes.glUniform1i glUniform1i;
    public static DelegateTypes.glUniform2i glUniform2i;
    public static DelegateTypes.glUniform3i glUniform3i;
    public static DelegateTypes.glUniform4i glUniform4i;
    public static DelegateTypes.glUniform1fv glUniform1fv;
    public static DelegateTypes.glUniform2fv glUniform2fv;
    public static DelegateTypes.glUniform3fv glUniform3fv;
    public static DelegateTypes.glUniform4fv glUniform4fv;
    public static DelegateTypes.glUniform1iv glUniform1iv;
    public static DelegateTypes.glUniform2iv glUniform2iv;
    public static DelegateTypes.glUniform3iv glUniform3iv;
    public static DelegateTypes.glUniform4iv glUniform4iv;
    public static DelegateTypes.glUniformMatrix2fv glUniformMatrix2fv;
    public static DelegateTypes.glUniformMatrix3fv glUniformMatrix3fv;
    public static DelegateTypes.glUniformMatrix4fv glUniformMatrix4fv;
    public static DelegateTypes.glValidateProgram glValidateProgram;
    public static DelegateTypes.glVertexAttrib1d glVertexAttrib1d;
    public static DelegateTypes.glVertexAttrib1dv glVertexAttrib1dv;
    public static DelegateTypes.glVertexAttrib1f glVertexAttrib1f;
    public static DelegateTypes.glVertexAttrib1fv glVertexAttrib1fv;
    public static DelegateTypes.glVertexAttrib1s glVertexAttrib1s;
    public static DelegateTypes.glVertexAttrib1sv glVertexAttrib1sv;
    public static DelegateTypes.glVertexAttrib2d glVertexAttrib2d;
    public static DelegateTypes.glVertexAttrib2dv glVertexAttrib2dv;
    public static DelegateTypes.glVertexAttrib2f glVertexAttrib2f;
    public static DelegateTypes.glVertexAttrib2fv glVertexAttrib2fv;
    public static DelegateTypes.glVertexAttrib2s glVertexAttrib2s;
    public static DelegateTypes.glVertexAttrib2sv glVertexAttrib2sv;
    public static DelegateTypes.glVertexAttrib3d glVertexAttrib3d;
    public static DelegateTypes.glVertexAttrib3dv glVertexAttrib3dv;
    public static DelegateTypes.glVertexAttrib3f glVertexAttrib3f;
    public static DelegateTypes.glVertexAttrib3fv glVertexAttrib3fv;
    public static DelegateTypes.glVertexAttrib3s glVertexAttrib3s;
    public static DelegateTypes.glVertexAttrib3sv glVertexAttrib3sv;
    public static DelegateTypes.glVertexAttrib4Nbv glVertexAttrib4Nbv;
    public static DelegateTypes.glVertexAttrib4Niv glVertexAttrib4Niv;
    public static DelegateTypes.glVertexAttrib4Nsv glVertexAttrib4Nsv;
    public static DelegateTypes.glVertexAttrib4Nub glVertexAttrib4Nub;
    public static DelegateTypes.glVertexAttrib4Nubv glVertexAttrib4Nubv;
    public static DelegateTypes.glVertexAttrib4Nuiv glVertexAttrib4Nuiv;
    public static DelegateTypes.glVertexAttrib4Nusv glVertexAttrib4Nusv;
    public static DelegateTypes.glVertexAttrib4bv glVertexAttrib4bv;
    public static DelegateTypes.glVertexAttrib4d glVertexAttrib4d;
    public static DelegateTypes.glVertexAttrib4dv glVertexAttrib4dv;
    public static DelegateTypes.glVertexAttrib4f glVertexAttrib4f;
    public static DelegateTypes.glVertexAttrib4fv glVertexAttrib4fv;
    public static DelegateTypes.glVertexAttrib4iv glVertexAttrib4iv;
    public static DelegateTypes.glVertexAttrib4s glVertexAttrib4s;
    public static DelegateTypes.glVertexAttrib4sv glVertexAttrib4sv;
    public static DelegateTypes.glVertexAttrib4ubv glVertexAttrib4ubv;
    public static DelegateTypes.glVertexAttrib4uiv glVertexAttrib4uiv;
    public static DelegateTypes.glVertexAttrib4usv glVertexAttrib4usv;
    public static DelegateTypes.glVertexAttribPointer glVertexAttribPointer;
    public static DelegateTypes.glUniformMatrix2x3fv glUniformMatrix2x3fv;
    public static DelegateTypes.glUniformMatrix3x2fv glUniformMatrix3x2fv;
    public static DelegateTypes.glUniformMatrix2x4fv glUniformMatrix2x4fv;
    public static DelegateTypes.glUniformMatrix4x2fv glUniformMatrix4x2fv;
    public static DelegateTypes.glUniformMatrix3x4fv glUniformMatrix3x4fv;
    public static DelegateTypes.glUniformMatrix4x3fv glUniformMatrix4x3fv;
    public static DelegateTypes.glColorMaski glColorMaski;
    public static DelegateTypes.glGetBooleani_v glGetBooleani_v;
    public static DelegateTypes.glGetIntegeri_v glGetIntegeri_v;
    public static DelegateTypes.glEnablei glEnablei;
    public static DelegateTypes.glDisablei glDisablei;
    public static DelegateTypes.glIsEnabledi glIsEnabledi;
    public static DelegateTypes.glBeginTransformFeedback glBeginTransformFeedback;
    public static DelegateTypes.glEndTransformFeedback glEndTransformFeedback;
    public static DelegateTypes.glBindBufferRange glBindBufferRange;
    public static DelegateTypes.glBindBufferBase glBindBufferBase;
    public static DelegateTypes.glTransformFeedbackVaryings glTransformFeedbackVaryings;
    public static DelegateTypes.glGetTransformFeedbackVarying glGetTransformFeedbackVarying;
    public static DelegateTypes.glClampColor glClampColor;
    public static DelegateTypes.glBeginConditionalRender glBeginConditionalRender;
    public static DelegateTypes.glEndConditionalRender glEndConditionalRender;
    public static DelegateTypes.glVertexAttribIPointer glVertexAttribIPointer;
    public static DelegateTypes.glGetVertexAttribIiv glGetVertexAttribIiv;
    public static DelegateTypes.glGetVertexAttribIuiv glGetVertexAttribIuiv;
    public static DelegateTypes.glVertexAttribI1i glVertexAttribI1i;
    public static DelegateTypes.glVertexAttribI2i glVertexAttribI2i;
    public static DelegateTypes.glVertexAttribI3i glVertexAttribI3i;
    public static DelegateTypes.glVertexAttribI4i glVertexAttribI4i;
    public static DelegateTypes.glVertexAttribI1ui glVertexAttribI1ui;
    public static DelegateTypes.glVertexAttribI2ui glVertexAttribI2ui;
    public static DelegateTypes.glVertexAttribI3ui glVertexAttribI3ui;
    public static DelegateTypes.glVertexAttribI4ui glVertexAttribI4ui;
    public static DelegateTypes.glVertexAttribI1iv glVertexAttribI1iv;
    public static DelegateTypes.glVertexAttribI2iv glVertexAttribI2iv;
    public static DelegateTypes.glVertexAttribI3iv glVertexAttribI3iv;
    public static DelegateTypes.glVertexAttribI4iv glVertexAttribI4iv;
    public static DelegateTypes.glVertexAttribI1uiv glVertexAttribI1uiv;
    public static DelegateTypes.glVertexAttribI2uiv glVertexAttribI2uiv;
    public static DelegateTypes.glVertexAttribI3uiv glVertexAttribI3uiv;
    public static DelegateTypes.glVertexAttribI4uiv glVertexAttribI4uiv;
    public static DelegateTypes.glVertexAttribI4bv glVertexAttribI4bv;
    public static DelegateTypes.glVertexAttribI4sv glVertexAttribI4sv;
    public static DelegateTypes.glVertexAttribI4ubv glVertexAttribI4ubv;
    public static DelegateTypes.glVertexAttribI4usv glVertexAttribI4usv;
    public static DelegateTypes.glGetUniformuiv glGetUniformuiv;
    public static DelegateTypes.glBindFragDataLocation glBindFragDataLocation;
    public static DelegateTypes.glGetFragDataLocation glGetFragDataLocation;
    public static DelegateTypes.glUniform1ui glUniform1ui;
    public static DelegateTypes.glUniform2ui glUniform2ui;
    public static DelegateTypes.glUniform3ui glUniform3ui;
    public static DelegateTypes.glUniform4ui glUniform4ui;
    public static DelegateTypes.glUniform1uiv glUniform1uiv;
    public static DelegateTypes.glUniform2uiv glUniform2uiv;
    public static DelegateTypes.glUniform3uiv glUniform3uiv;
    public static DelegateTypes.glUniform4uiv glUniform4uiv;
    public static DelegateTypes.glTexParameterIiv glTexParameterIiv;
    public static DelegateTypes.glTexParameterIuiv glTexParameterIuiv;
    public static DelegateTypes.glGetTexParameterIiv glGetTexParameterIiv;
    public static DelegateTypes.glGetTexParameterIuiv glGetTexParameterIuiv;
    public static DelegateTypes.glClearBufferiv glClearBufferiv;
    public static DelegateTypes.glClearBufferuiv glClearBufferuiv;
    public static DelegateTypes.glClearBufferfv glClearBufferfv;
    public static DelegateTypes.glClearBufferfi glClearBufferfi;
    public static DelegateTypes.glGetStringi glGetStringi;
    public static DelegateTypes.glIsRenderbuffer glIsRenderbuffer;
    public static DelegateTypes.glBindRenderbuffer glBindRenderbuffer;
    public static DelegateTypes.glDeleteRenderbuffers glDeleteRenderbuffers;
    public static DelegateTypes.glGenRenderbuffers glGenRenderbuffers;
    public static DelegateTypes.glRenderbufferStorage glRenderbufferStorage;
    public static DelegateTypes.glGetRenderbufferParameteriv glGetRenderbufferParameteriv;
    public static DelegateTypes.glIsFramebuffer glIsFramebuffer;
    public static DelegateTypes.glBindFramebuffer glBindFramebuffer;
    public static DelegateTypes.glDeleteFramebuffers glDeleteFramebuffers;
    public static DelegateTypes.glGenFramebuffers glGenFramebuffers;
    public static DelegateTypes.glCheckFramebufferStatus glCheckFramebufferStatus;
    public static DelegateTypes.glFramebufferTexture1D glFramebufferTexture1D;
    public static DelegateTypes.glFramebufferTexture2D glFramebufferTexture2D;
    public static DelegateTypes.glFramebufferTexture3D glFramebufferTexture3D;
    public static DelegateTypes.glFramebufferRenderbuffer glFramebufferRenderbuffer;
    public static DelegateTypes.glGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;
    public static DelegateTypes.glGenerateMipmap glGenerateMipmap;
    public static DelegateTypes.glBlitFramebuffer glBlitFramebuffer;
    public static DelegateTypes.glRenderbufferStorageMultisample glRenderbufferStorageMultisample;
    public static DelegateTypes.glFramebufferTextureLayer glFramebufferTextureLayer;
    public static DelegateTypes.glMapBufferRange glMapBufferRange;
    public static DelegateTypes.glFlushMappedBufferRange glFlushMappedBufferRange;
    public static DelegateTypes.glBindVertexArray glBindVertexArray;
    public static DelegateTypes.glDeleteVertexArrays glDeleteVertexArrays;
    public static DelegateTypes.glGenVertexArrays glGenVertexArrays;
    public static DelegateTypes.glIsVertexArray glIsVertexArray;
    public static DelegateTypes.glDrawArraysInstanced glDrawArraysInstanced;
    public static DelegateTypes.glDrawElementsInstanced glDrawElementsInstanced;
    public static DelegateTypes.glTexBuffer glTexBuffer;
    public static DelegateTypes.glPrimitiveRestartIndex glPrimitiveRestartIndex;
    public static DelegateTypes.glCopyBufferSubData glCopyBufferSubData;
    public static DelegateTypes.glGetUniformIndices glGetUniformIndices;
    public static DelegateTypes.glGetActiveUniformsiv glGetActiveUniformsiv;
    public static DelegateTypes.glGetActiveUniformName glGetActiveUniformName;
    public static DelegateTypes.glGetUniformBlockIndex glGetUniformBlockIndex;
    public static DelegateTypes.glGetActiveUniformBlockiv glGetActiveUniformBlockiv;
    public static DelegateTypes.glGetActiveUniformBlockName glGetActiveUniformBlockName;
    public static DelegateTypes.glUniformBlockBinding glUniformBlockBinding;
    public static DelegateTypes.glDrawElementsBaseVertex glDrawElementsBaseVertex;
    public static DelegateTypes.glDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex;
    public static DelegateTypes.glDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex;
    public static DelegateTypes.glMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex;
    public static DelegateTypes.glProvokingVertex glProvokingVertex;
    public static DelegateTypes.glFenceSync glFenceSync;
    public static DelegateTypes.glIsSync glIsSync;
    public static DelegateTypes.glDeleteSync glDeleteSync;
    public static DelegateTypes.glClientWaitSync glClientWaitSync;
    public static DelegateTypes.glWaitSync glWaitSync;
    public static DelegateTypes.glGetInteger64v glGetInteger64v;
    public static DelegateTypes.glGetSynciv glGetSynciv;
    public static DelegateTypes.glGetInteger64i_v glGetInteger64i_v;
    public static DelegateTypes.glGetBufferParameteri64v glGetBufferParameteri64v;
    public static DelegateTypes.glFramebufferTexture glFramebufferTexture;
    public static DelegateTypes.glTexImage2DMultisample glTexImage2DMultisample;
    public static DelegateTypes.glTexImage3DMultisample glTexImage3DMultisample;
    public static DelegateTypes.glGetMultisamplefv glGetMultisamplefv;
    public static DelegateTypes.glSampleMaski glSampleMaski;
    public static DelegateTypes.glBindFragDataLocationIndexed glBindFragDataLocationIndexed;
    public static DelegateTypes.glGetFragDataIndex glGetFragDataIndex;
    public static DelegateTypes.glGenSamplers glGenSamplers;
    public static DelegateTypes.glDeleteSamplers glDeleteSamplers;
    public static DelegateTypes.glIsSampler glIsSampler;
    public static DelegateTypes.glBindSampler glBindSampler;
    public static DelegateTypes.glSamplerParameteri glSamplerParameteri;
    public static DelegateTypes.glSamplerParameteriv glSamplerParameteriv;
    public static DelegateTypes.glSamplerParameterf glSamplerParameterf;
    public static DelegateTypes.glSamplerParameterfv glSamplerParameterfv;
    public static DelegateTypes.glSamplerParameterIiv glSamplerParameterIiv;
    public static DelegateTypes.glSamplerParameterIuiv glSamplerParameterIuiv;
    public static DelegateTypes.glGetSamplerParameteriv glGetSamplerParameteriv;
    public static DelegateTypes.glGetSamplerParameterIiv glGetSamplerParameterIiv;
    public static DelegateTypes.glGetSamplerParameterfv glGetSamplerParameterfv;
    public static DelegateTypes.glGetSamplerParameterIuiv glGetSamplerParameterIuiv;
    public static DelegateTypes.glQueryCounter glQueryCounter;
    public static DelegateTypes.glGetQueryObjecti64v glGetQueryObjecti64v;
    public static DelegateTypes.glGetQueryObjectui64v glGetQueryObjectui64v;
    public static DelegateTypes.glVertexAttribDivisor glVertexAttribDivisor;
    public static DelegateTypes.glVertexAttribP1ui glVertexAttribP1ui;
    public static DelegateTypes.glVertexAttribP1uiv glVertexAttribP1uiv;
    public static DelegateTypes.glVertexAttribP2ui glVertexAttribP2ui;
    public static DelegateTypes.glVertexAttribP2uiv glVertexAttribP2uiv;
    public static DelegateTypes.glVertexAttribP3ui glVertexAttribP3ui;
    public static DelegateTypes.glVertexAttribP3uiv glVertexAttribP3uiv;
    public static DelegateTypes.glVertexAttribP4ui glVertexAttribP4ui;
    public static DelegateTypes.glVertexAttribP4uiv glVertexAttribP4uiv;
    public static DelegateTypes.glVertexP2ui glVertexP2ui;
    public static DelegateTypes.glVertexP2uiv glVertexP2uiv;
    public static DelegateTypes.glVertexP3ui glVertexP3ui;
    public static DelegateTypes.glVertexP3uiv glVertexP3uiv;
    public static DelegateTypes.glVertexP4ui glVertexP4ui;
    public static DelegateTypes.glVertexP4uiv glVertexP4uiv;
    public static DelegateTypes.glTexCoordP1ui glTexCoordP1ui;
    public static DelegateTypes.glTexCoordP1uiv glTexCoordP1uiv;
    public static DelegateTypes.glTexCoordP2ui glTexCoordP2ui;
    public static DelegateTypes.glTexCoordP2uiv glTexCoordP2uiv;
    public static DelegateTypes.glTexCoordP3ui glTexCoordP3ui;
    public static DelegateTypes.glTexCoordP3uiv glTexCoordP3uiv;
    public static DelegateTypes.glTexCoordP4ui glTexCoordP4ui;
    public static DelegateTypes.glTexCoordP4uiv glTexCoordP4uiv;
    public static DelegateTypes.glMultiTexCoordP1ui glMultiTexCoordP1ui;
    public static DelegateTypes.glMultiTexCoordP1uiv glMultiTexCoordP1uiv;
    public static DelegateTypes.glMultiTexCoordP2ui glMultiTexCoordP2ui;
    public static DelegateTypes.glMultiTexCoordP2uiv glMultiTexCoordP2uiv;
    public static DelegateTypes.glMultiTexCoordP3ui glMultiTexCoordP3ui;
    public static DelegateTypes.glMultiTexCoordP3uiv glMultiTexCoordP3uiv;
    public static DelegateTypes.glMultiTexCoordP4ui glMultiTexCoordP4ui;
    public static DelegateTypes.glMultiTexCoordP4uiv glMultiTexCoordP4uiv;
    public static DelegateTypes.glNormalP3ui glNormalP3ui;
    public static DelegateTypes.glNormalP3uiv glNormalP3uiv;
    public static DelegateTypes.glColorP3ui glColorP3ui;
    public static DelegateTypes.glColorP3uiv glColorP3uiv;
    public static DelegateTypes.glColorP4ui glColorP4ui;
    public static DelegateTypes.glColorP4uiv glColorP4uiv;
    public static DelegateTypes.glSecondaryColorP3ui glSecondaryColorP3ui;
    public static DelegateTypes.glSecondaryColorP3uiv glSecondaryColorP3uiv;
    public static DelegateTypes.glDebugMessageControl glDebugMessageControl;
    public static DelegateTypes.glDebugMessageInsert glDebugMessageInsert;
    public static DelegateTypes.glDebugMessageCallback glDebugMessageCallback;
    public static DelegateTypes.glGetDebugMessageLog glGetDebugMessageLog;
    public static DelegateTypes.glPushDebugGroup glPushDebugGroup;
    public static DelegateTypes.glPopDebugGroup glPopDebugGroup;
    public static DelegateTypes.glObjectLabel glObjectLabel;
    public static DelegateTypes.glGetObjectLabel glGetObjectLabel;
    public static DelegateTypes.glObjectPtrLabel glObjectPtrLabel;
    public static DelegateTypes.glGetObjectPtrLabel glGetObjectPtrLabel;
    public static DelegateTypes.glGetPointerv glGetPointerv;

    private static T Load<T>(string name)
    {
        IntPtr proc = SDL.SDL_GL_GetProcAddress(name);
        if (proc == IntPtr.Zero)
        {
            throw new GameException("Unable to load OpenGL function " + name);
        }
        return Marshal.GetDelegateForFunctionPointer<T>(proc);
    }

    public static void LoadAll()
    {
        glCullFace = Load<DelegateTypes.glCullFace>("glCullFace");
        glFrontFace = Load<DelegateTypes.glFrontFace>("glFrontFace");
        glHint = Load<DelegateTypes.glHint>("glHint");
        glLineWidth = Load<DelegateTypes.glLineWidth>("glLineWidth");
        glPointSize = Load<DelegateTypes.glPointSize>("glPointSize");
        glPolygonMode = Load<DelegateTypes.glPolygonMode>("glPolygonMode");
        glScissor = Load<DelegateTypes.glScissor>("glScissor");
        glTexParameterf = Load<DelegateTypes.glTexParameterf>("glTexParameterf");
        glTexParameterfv = Load<DelegateTypes.glTexParameterfv>("glTexParameterfv");
        glTexParameteri = Load<DelegateTypes.glTexParameteri>("glTexParameteri");
        glTexParameteriv = Load<DelegateTypes.glTexParameteriv>("glTexParameteriv");
        glTexImage1D = Load<DelegateTypes.glTexImage1D>("glTexImage1D");
        glTexImage2D = Load<DelegateTypes.glTexImage2D>("glTexImage2D");
        glDrawBuffer = Load<DelegateTypes.glDrawBuffer>("glDrawBuffer");
        glClear = Load<DelegateTypes.glClear>("glClear");
        glClearColor = Load<DelegateTypes.glClearColor>("glClearColor");
        glClearStencil = Load<DelegateTypes.glClearStencil>("glClearStencil");
        glClearDepth = Load<DelegateTypes.glClearDepth>("glClearDepth");
        glStencilMask = Load<DelegateTypes.glStencilMask>("glStencilMask");
        glColorMask = Load<DelegateTypes.glColorMask>("glColorMask");
        glDepthMask = Load<DelegateTypes.glDepthMask>("glDepthMask");
        glDisable = Load<DelegateTypes.glDisable>("glDisable");
        glEnable = Load<DelegateTypes.glEnable>("glEnable");
        glFinish = Load<DelegateTypes.glFinish>("glFinish");
        glFlush = Load<DelegateTypes.glFlush>("glFlush");
        glBlendFunc = Load<DelegateTypes.glBlendFunc>("glBlendFunc");
        glLogicOp = Load<DelegateTypes.glLogicOp>("glLogicOp");
        glStencilFunc = Load<DelegateTypes.glStencilFunc>("glStencilFunc");
        glStencilOp = Load<DelegateTypes.glStencilOp>("glStencilOp");
        glDepthFunc = Load<DelegateTypes.glDepthFunc>("glDepthFunc");
        glPixelStoref = Load<DelegateTypes.glPixelStoref>("glPixelStoref");
        glPixelStorei = Load<DelegateTypes.glPixelStorei>("glPixelStorei");
        glReadBuffer = Load<DelegateTypes.glReadBuffer>("glReadBuffer");
        glReadPixels = Load<DelegateTypes.glReadPixels>("glReadPixels");
        glGetBooleanv = Load<DelegateTypes.glGetBooleanv>("glGetBooleanv");
        glGetDoublev = Load<DelegateTypes.glGetDoublev>("glGetDoublev");
        glGetError = Load<DelegateTypes.glGetError>("glGetError");
        glGetFloatv = Load<DelegateTypes.glGetFloatv>("glGetFloatv");
        glGetIntegerv = Load<DelegateTypes.glGetIntegerv>("glGetIntegerv");
        glGetString = Load<DelegateTypes.glGetString>("glGetString");
        glGetTexImage = Load<DelegateTypes.glGetTexImage>("glGetTexImage");
        glGetTexParameterfv = Load<DelegateTypes.glGetTexParameterfv>("glGetTexParameterfv");
        glGetTexParameteriv = Load<DelegateTypes.glGetTexParameteriv>("glGetTexParameteriv");
        glGetTexLevelParameterfv = Load<DelegateTypes.glGetTexLevelParameterfv>("glGetTexLevelParameterfv");
        glGetTexLevelParameteriv = Load<DelegateTypes.glGetTexLevelParameteriv>("glGetTexLevelParameteriv");
        glIsEnabled = Load<DelegateTypes.glIsEnabled>("glIsEnabled");
        glDepthRange = Load<DelegateTypes.glDepthRange>("glDepthRange");
        glViewport = Load<DelegateTypes.glViewport>("glViewport");
        glDrawArrays = Load<DelegateTypes.glDrawArrays>("glDrawArrays");
        glDrawElements = Load<DelegateTypes.glDrawElements>("glDrawElements");
        glPolygonOffset = Load<DelegateTypes.glPolygonOffset>("glPolygonOffset");
        glCopyTexImage1D = Load<DelegateTypes.glCopyTexImage1D>("glCopyTexImage1D");
        glCopyTexImage2D = Load<DelegateTypes.glCopyTexImage2D>("glCopyTexImage2D");
        glCopyTexSubImage1D = Load<DelegateTypes.glCopyTexSubImage1D>("glCopyTexSubImage1D");
        glCopyTexSubImage2D = Load<DelegateTypes.glCopyTexSubImage2D>("glCopyTexSubImage2D");
        glTexSubImage1D = Load<DelegateTypes.glTexSubImage1D>("glTexSubImage1D");
        glTexSubImage2D = Load<DelegateTypes.glTexSubImage2D>("glTexSubImage2D");
        glBindTexture = Load<DelegateTypes.glBindTexture>("glBindTexture");
        glDeleteTextures = Load<DelegateTypes.glDeleteTextures>("glDeleteTextures");
        glGenTextures = Load<DelegateTypes.glGenTextures>("glGenTextures");
        glIsTexture = Load<DelegateTypes.glIsTexture>("glIsTexture");
        glDrawRangeElements = Load<DelegateTypes.glDrawRangeElements>("glDrawRangeElements");
        glTexImage3D = Load<DelegateTypes.glTexImage3D>("glTexImage3D");
        glTexSubImage3D = Load<DelegateTypes.glTexSubImage3D>("glTexSubImage3D");
        glCopyTexSubImage3D = Load<DelegateTypes.glCopyTexSubImage3D>("glCopyTexSubImage3D");
        glActiveTexture = Load<DelegateTypes.glActiveTexture>("glActiveTexture");
        glSampleCoverage = Load<DelegateTypes.glSampleCoverage>("glSampleCoverage");
        glCompressedTexImage3D = Load<DelegateTypes.glCompressedTexImage3D>("glCompressedTexImage3D");
        glCompressedTexImage2D = Load<DelegateTypes.glCompressedTexImage2D>("glCompressedTexImage2D");
        glCompressedTexImage1D = Load<DelegateTypes.glCompressedTexImage1D>("glCompressedTexImage1D");
        glCompressedTexSubImage3D = Load<DelegateTypes.glCompressedTexSubImage3D>("glCompressedTexSubImage3D");
        glCompressedTexSubImage2D = Load<DelegateTypes.glCompressedTexSubImage2D>("glCompressedTexSubImage2D");
        glCompressedTexSubImage1D = Load<DelegateTypes.glCompressedTexSubImage1D>("glCompressedTexSubImage1D");
        glGetCompressedTexImage = Load<DelegateTypes.glGetCompressedTexImage>("glGetCompressedTexImage");
        glBlendFuncSeparate = Load<DelegateTypes.glBlendFuncSeparate>("glBlendFuncSeparate");
        glMultiDrawArrays = Load<DelegateTypes.glMultiDrawArrays>("glMultiDrawArrays");
        glMultiDrawElements = Load<DelegateTypes.glMultiDrawElements>("glMultiDrawElements");
        glPointParameterf = Load<DelegateTypes.glPointParameterf>("glPointParameterf");
        glPointParameterfv = Load<DelegateTypes.glPointParameterfv>("glPointParameterfv");
        glPointParameteri = Load<DelegateTypes.glPointParameteri>("glPointParameteri");
        glPointParameteriv = Load<DelegateTypes.glPointParameteriv>("glPointParameteriv");
        glBlendColor = Load<DelegateTypes.glBlendColor>("glBlendColor");
        glBlendEquation = Load<DelegateTypes.glBlendEquation>("glBlendEquation");
        glGenQueries = Load<DelegateTypes.glGenQueries>("glGenQueries");
        glDeleteQueries = Load<DelegateTypes.glDeleteQueries>("glDeleteQueries");
        glIsQuery = Load<DelegateTypes.glIsQuery>("glIsQuery");
        glBeginQuery = Load<DelegateTypes.glBeginQuery>("glBeginQuery");
        glEndQuery = Load<DelegateTypes.glEndQuery>("glEndQuery");
        glGetQueryiv = Load<DelegateTypes.glGetQueryiv>("glGetQueryiv");
        glGetQueryObjectiv = Load<DelegateTypes.glGetQueryObjectiv>("glGetQueryObjectiv");
        glGetQueryObjectuiv = Load<DelegateTypes.glGetQueryObjectuiv>("glGetQueryObjectuiv");
        glBindBuffer = Load<DelegateTypes.glBindBuffer>("glBindBuffer");
        glDeleteBuffers = Load<DelegateTypes.glDeleteBuffers>("glDeleteBuffers");
        glGenBuffers = Load<DelegateTypes.glGenBuffers>("glGenBuffers");
        glIsBuffer = Load<DelegateTypes.glIsBuffer>("glIsBuffer");
        glBufferData = Load<DelegateTypes.glBufferData>("glBufferData");
        glBufferSubData = Load<DelegateTypes.glBufferSubData>("glBufferSubData");
        glGetBufferSubData = Load<DelegateTypes.glGetBufferSubData>("glGetBufferSubData");
        glMapBuffer = Load<DelegateTypes.glMapBuffer>("glMapBuffer");
        glUnmapBuffer = Load<DelegateTypes.glUnmapBuffer>("glUnmapBuffer");
        glGetBufferParameteriv = Load<DelegateTypes.glGetBufferParameteriv>("glGetBufferParameteriv");
        glGetBufferPointerv = Load<DelegateTypes.glGetBufferPointerv>("glGetBufferPointerv");
        glBlendEquationSeparate = Load<DelegateTypes.glBlendEquationSeparate>("glBlendEquationSeparate");
        glDrawBuffers = Load<DelegateTypes.glDrawBuffers>("glDrawBuffers");
        glStencilOpSeparate = Load<DelegateTypes.glStencilOpSeparate>("glStencilOpSeparate");
        glStencilFuncSeparate = Load<DelegateTypes.glStencilFuncSeparate>("glStencilFuncSeparate");
        glStencilMaskSeparate = Load<DelegateTypes.glStencilMaskSeparate>("glStencilMaskSeparate");
        glAttachShader = Load<DelegateTypes.glAttachShader>("glAttachShader");
        glBindAttribLocation = Load<DelegateTypes.glBindAttribLocation>("glBindAttribLocation");
        glCompileShader = Load<DelegateTypes.glCompileShader>("glCompileShader");
        glCreateProgram = Load<DelegateTypes.glCreateProgram>("glCreateProgram");
        glCreateShader = Load<DelegateTypes.glCreateShader>("glCreateShader");
        glDeleteProgram = Load<DelegateTypes.glDeleteProgram>("glDeleteProgram");
        glDeleteShader = Load<DelegateTypes.glDeleteShader>("glDeleteShader");
        glDetachShader = Load<DelegateTypes.glDetachShader>("glDetachShader");
        glDisableVertexAttribArray = Load<DelegateTypes.glDisableVertexAttribArray>("glDisableVertexAttribArray");
        glEnableVertexAttribArray = Load<DelegateTypes.glEnableVertexAttribArray>("glEnableVertexAttribArray");
        glGetActiveAttrib = Load<DelegateTypes.glGetActiveAttrib>("glGetActiveAttrib");
        glGetActiveUniform = Load<DelegateTypes.glGetActiveUniform>("glGetActiveUniform");
        glGetAttachedShaders = Load<DelegateTypes.glGetAttachedShaders>("glGetAttachedShaders");
        glGetAttribLocation = Load<DelegateTypes.glGetAttribLocation>("glGetAttribLocation");
        glGetProgramiv = Load<DelegateTypes.glGetProgramiv>("glGetProgramiv");
        glGetProgramInfoLog = Load<DelegateTypes.glGetProgramInfoLog>("glGetProgramInfoLog");
        glGetShaderiv = Load<DelegateTypes.glGetShaderiv>("glGetShaderiv");
        glGetShaderInfoLog = Load<DelegateTypes.glGetShaderInfoLog>("glGetShaderInfoLog");
        glGetShaderSource = Load<DelegateTypes.glGetShaderSource>("glGetShaderSource");
        glGetUniformLocation = Load<DelegateTypes.glGetUniformLocation>("glGetUniformLocation");
        glGetUniformfv = Load<DelegateTypes.glGetUniformfv>("glGetUniformfv");
        glGetUniformiv = Load<DelegateTypes.glGetUniformiv>("glGetUniformiv");
        glGetVertexAttribdv = Load<DelegateTypes.glGetVertexAttribdv>("glGetVertexAttribdv");
        glGetVertexAttribfv = Load<DelegateTypes.glGetVertexAttribfv>("glGetVertexAttribfv");
        glGetVertexAttribiv = Load<DelegateTypes.glGetVertexAttribiv>("glGetVertexAttribiv");
        glGetVertexAttribPointerv = Load<DelegateTypes.glGetVertexAttribPointerv>("glGetVertexAttribPointerv");
        glIsProgram = Load<DelegateTypes.glIsProgram>("glIsProgram");
        glIsShader = Load<DelegateTypes.glIsShader>("glIsShader");
        glLinkProgram = Load<DelegateTypes.glLinkProgram>("glLinkProgram");
        glShaderSource = Load<DelegateTypes.glShaderSource>("glShaderSource");
        glUseProgram = Load<DelegateTypes.glUseProgram>("glUseProgram");
        glUniform1f = Load<DelegateTypes.glUniform1f>("glUniform1f");
        glUniform2f = Load<DelegateTypes.glUniform2f>("glUniform2f");
        glUniform3f = Load<DelegateTypes.glUniform3f>("glUniform3f");
        glUniform4f = Load<DelegateTypes.glUniform4f>("glUniform4f");
        glUniform1i = Load<DelegateTypes.glUniform1i>("glUniform1i");
        glUniform2i = Load<DelegateTypes.glUniform2i>("glUniform2i");
        glUniform3i = Load<DelegateTypes.glUniform3i>("glUniform3i");
        glUniform4i = Load<DelegateTypes.glUniform4i>("glUniform4i");
        glUniform1fv = Load<DelegateTypes.glUniform1fv>("glUniform1fv");
        glUniform2fv = Load<DelegateTypes.glUniform2fv>("glUniform2fv");
        glUniform3fv = Load<DelegateTypes.glUniform3fv>("glUniform3fv");
        glUniform4fv = Load<DelegateTypes.glUniform4fv>("glUniform4fv");
        glUniform1iv = Load<DelegateTypes.glUniform1iv>("glUniform1iv");
        glUniform2iv = Load<DelegateTypes.glUniform2iv>("glUniform2iv");
        glUniform3iv = Load<DelegateTypes.glUniform3iv>("glUniform3iv");
        glUniform4iv = Load<DelegateTypes.glUniform4iv>("glUniform4iv");
        glUniformMatrix2fv = Load<DelegateTypes.glUniformMatrix2fv>("glUniformMatrix2fv");
        glUniformMatrix3fv = Load<DelegateTypes.glUniformMatrix3fv>("glUniformMatrix3fv");
        glUniformMatrix4fv = Load<DelegateTypes.glUniformMatrix4fv>("glUniformMatrix4fv");
        glValidateProgram = Load<DelegateTypes.glValidateProgram>("glValidateProgram");
        glVertexAttrib1d = Load<DelegateTypes.glVertexAttrib1d>("glVertexAttrib1d");
        glVertexAttrib1dv = Load<DelegateTypes.glVertexAttrib1dv>("glVertexAttrib1dv");
        glVertexAttrib1f = Load<DelegateTypes.glVertexAttrib1f>("glVertexAttrib1f");
        glVertexAttrib1fv = Load<DelegateTypes.glVertexAttrib1fv>("glVertexAttrib1fv");
        glVertexAttrib1s = Load<DelegateTypes.glVertexAttrib1s>("glVertexAttrib1s");
        glVertexAttrib1sv = Load<DelegateTypes.glVertexAttrib1sv>("glVertexAttrib1sv");
        glVertexAttrib2d = Load<DelegateTypes.glVertexAttrib2d>("glVertexAttrib2d");
        glVertexAttrib2dv = Load<DelegateTypes.glVertexAttrib2dv>("glVertexAttrib2dv");
        glVertexAttrib2f = Load<DelegateTypes.glVertexAttrib2f>("glVertexAttrib2f");
        glVertexAttrib2fv = Load<DelegateTypes.glVertexAttrib2fv>("glVertexAttrib2fv");
        glVertexAttrib2s = Load<DelegateTypes.glVertexAttrib2s>("glVertexAttrib2s");
        glVertexAttrib2sv = Load<DelegateTypes.glVertexAttrib2sv>("glVertexAttrib2sv");
        glVertexAttrib3d = Load<DelegateTypes.glVertexAttrib3d>("glVertexAttrib3d");
        glVertexAttrib3dv = Load<DelegateTypes.glVertexAttrib3dv>("glVertexAttrib3dv");
        glVertexAttrib3f = Load<DelegateTypes.glVertexAttrib3f>("glVertexAttrib3f");
        glVertexAttrib3fv = Load<DelegateTypes.glVertexAttrib3fv>("glVertexAttrib3fv");
        glVertexAttrib3s = Load<DelegateTypes.glVertexAttrib3s>("glVertexAttrib3s");
        glVertexAttrib3sv = Load<DelegateTypes.glVertexAttrib3sv>("glVertexAttrib3sv");
        glVertexAttrib4Nbv = Load<DelegateTypes.glVertexAttrib4Nbv>("glVertexAttrib4Nbv");
        glVertexAttrib4Niv = Load<DelegateTypes.glVertexAttrib4Niv>("glVertexAttrib4Niv");
        glVertexAttrib4Nsv = Load<DelegateTypes.glVertexAttrib4Nsv>("glVertexAttrib4Nsv");
        glVertexAttrib4Nub = Load<DelegateTypes.glVertexAttrib4Nub>("glVertexAttrib4Nub");
        glVertexAttrib4Nubv = Load<DelegateTypes.glVertexAttrib4Nubv>("glVertexAttrib4Nubv");
        glVertexAttrib4Nuiv = Load<DelegateTypes.glVertexAttrib4Nuiv>("glVertexAttrib4Nuiv");
        glVertexAttrib4Nusv = Load<DelegateTypes.glVertexAttrib4Nusv>("glVertexAttrib4Nusv");
        glVertexAttrib4bv = Load<DelegateTypes.glVertexAttrib4bv>("glVertexAttrib4bv");
        glVertexAttrib4d = Load<DelegateTypes.glVertexAttrib4d>("glVertexAttrib4d");
        glVertexAttrib4dv = Load<DelegateTypes.glVertexAttrib4dv>("glVertexAttrib4dv");
        glVertexAttrib4f = Load<DelegateTypes.glVertexAttrib4f>("glVertexAttrib4f");
        glVertexAttrib4fv = Load<DelegateTypes.glVertexAttrib4fv>("glVertexAttrib4fv");
        glVertexAttrib4iv = Load<DelegateTypes.glVertexAttrib4iv>("glVertexAttrib4iv");
        glVertexAttrib4s = Load<DelegateTypes.glVertexAttrib4s>("glVertexAttrib4s");
        glVertexAttrib4sv = Load<DelegateTypes.glVertexAttrib4sv>("glVertexAttrib4sv");
        glVertexAttrib4ubv = Load<DelegateTypes.glVertexAttrib4ubv>("glVertexAttrib4ubv");
        glVertexAttrib4uiv = Load<DelegateTypes.glVertexAttrib4uiv>("glVertexAttrib4uiv");
        glVertexAttrib4usv = Load<DelegateTypes.glVertexAttrib4usv>("glVertexAttrib4usv");
        glVertexAttribPointer = Load<DelegateTypes.glVertexAttribPointer>("glVertexAttribPointer");
        glUniformMatrix2x3fv = Load<DelegateTypes.glUniformMatrix2x3fv>("glUniformMatrix2x3fv");
        glUniformMatrix3x2fv = Load<DelegateTypes.glUniformMatrix3x2fv>("glUniformMatrix3x2fv");
        glUniformMatrix2x4fv = Load<DelegateTypes.glUniformMatrix2x4fv>("glUniformMatrix2x4fv");
        glUniformMatrix4x2fv = Load<DelegateTypes.glUniformMatrix4x2fv>("glUniformMatrix4x2fv");
        glUniformMatrix3x4fv = Load<DelegateTypes.glUniformMatrix3x4fv>("glUniformMatrix3x4fv");
        glUniformMatrix4x3fv = Load<DelegateTypes.glUniformMatrix4x3fv>("glUniformMatrix4x3fv");
        glColorMaski = Load<DelegateTypes.glColorMaski>("glColorMaski");
        glGetBooleani_v = Load<DelegateTypes.glGetBooleani_v>("glGetBooleani_v");
        glGetIntegeri_v = Load<DelegateTypes.glGetIntegeri_v>("glGetIntegeri_v");
        glEnablei = Load<DelegateTypes.glEnablei>("glEnablei");
        glDisablei = Load<DelegateTypes.glDisablei>("glDisablei");
        glIsEnabledi = Load<DelegateTypes.glIsEnabledi>("glIsEnabledi");
        glBeginTransformFeedback = Load<DelegateTypes.glBeginTransformFeedback>("glBeginTransformFeedback");
        glEndTransformFeedback = Load<DelegateTypes.glEndTransformFeedback>("glEndTransformFeedback");
        glBindBufferRange = Load<DelegateTypes.glBindBufferRange>("glBindBufferRange");
        glBindBufferBase = Load<DelegateTypes.glBindBufferBase>("glBindBufferBase");
        glTransformFeedbackVaryings = Load<DelegateTypes.glTransformFeedbackVaryings>("glTransformFeedbackVaryings");
        glGetTransformFeedbackVarying = Load<DelegateTypes.glGetTransformFeedbackVarying>("glGetTransformFeedbackVarying");
        glClampColor = Load<DelegateTypes.glClampColor>("glClampColor");
        glBeginConditionalRender = Load<DelegateTypes.glBeginConditionalRender>("glBeginConditionalRender");
        glEndConditionalRender = Load<DelegateTypes.glEndConditionalRender>("glEndConditionalRender");
        glVertexAttribIPointer = Load<DelegateTypes.glVertexAttribIPointer>("glVertexAttribIPointer");
        glGetVertexAttribIiv = Load<DelegateTypes.glGetVertexAttribIiv>("glGetVertexAttribIiv");
        glGetVertexAttribIuiv = Load<DelegateTypes.glGetVertexAttribIuiv>("glGetVertexAttribIuiv");
        glVertexAttribI1i = Load<DelegateTypes.glVertexAttribI1i>("glVertexAttribI1i");
        glVertexAttribI2i = Load<DelegateTypes.glVertexAttribI2i>("glVertexAttribI2i");
        glVertexAttribI3i = Load<DelegateTypes.glVertexAttribI3i>("glVertexAttribI3i");
        glVertexAttribI4i = Load<DelegateTypes.glVertexAttribI4i>("glVertexAttribI4i");
        glVertexAttribI1ui = Load<DelegateTypes.glVertexAttribI1ui>("glVertexAttribI1ui");
        glVertexAttribI2ui = Load<DelegateTypes.glVertexAttribI2ui>("glVertexAttribI2ui");
        glVertexAttribI3ui = Load<DelegateTypes.glVertexAttribI3ui>("glVertexAttribI3ui");
        glVertexAttribI4ui = Load<DelegateTypes.glVertexAttribI4ui>("glVertexAttribI4ui");
        glVertexAttribI1iv = Load<DelegateTypes.glVertexAttribI1iv>("glVertexAttribI1iv");
        glVertexAttribI2iv = Load<DelegateTypes.glVertexAttribI2iv>("glVertexAttribI2iv");
        glVertexAttribI3iv = Load<DelegateTypes.glVertexAttribI3iv>("glVertexAttribI3iv");
        glVertexAttribI4iv = Load<DelegateTypes.glVertexAttribI4iv>("glVertexAttribI4iv");
        glVertexAttribI1uiv = Load<DelegateTypes.glVertexAttribI1uiv>("glVertexAttribI1uiv");
        glVertexAttribI2uiv = Load<DelegateTypes.glVertexAttribI2uiv>("glVertexAttribI2uiv");
        glVertexAttribI3uiv = Load<DelegateTypes.glVertexAttribI3uiv>("glVertexAttribI3uiv");
        glVertexAttribI4uiv = Load<DelegateTypes.glVertexAttribI4uiv>("glVertexAttribI4uiv");
        glVertexAttribI4bv = Load<DelegateTypes.glVertexAttribI4bv>("glVertexAttribI4bv");
        glVertexAttribI4sv = Load<DelegateTypes.glVertexAttribI4sv>("glVertexAttribI4sv");
        glVertexAttribI4ubv = Load<DelegateTypes.glVertexAttribI4ubv>("glVertexAttribI4ubv");
        glVertexAttribI4usv = Load<DelegateTypes.glVertexAttribI4usv>("glVertexAttribI4usv");
        glGetUniformuiv = Load<DelegateTypes.glGetUniformuiv>("glGetUniformuiv");
        glBindFragDataLocation = Load<DelegateTypes.glBindFragDataLocation>("glBindFragDataLocation");
        glGetFragDataLocation = Load<DelegateTypes.glGetFragDataLocation>("glGetFragDataLocation");
        glUniform1ui = Load<DelegateTypes.glUniform1ui>("glUniform1ui");
        glUniform2ui = Load<DelegateTypes.glUniform2ui>("glUniform2ui");
        glUniform3ui = Load<DelegateTypes.glUniform3ui>("glUniform3ui");
        glUniform4ui = Load<DelegateTypes.glUniform4ui>("glUniform4ui");
        glUniform1uiv = Load<DelegateTypes.glUniform1uiv>("glUniform1uiv");
        glUniform2uiv = Load<DelegateTypes.glUniform2uiv>("glUniform2uiv");
        glUniform3uiv = Load<DelegateTypes.glUniform3uiv>("glUniform3uiv");
        glUniform4uiv = Load<DelegateTypes.glUniform4uiv>("glUniform4uiv");
        glTexParameterIiv = Load<DelegateTypes.glTexParameterIiv>("glTexParameterIiv");
        glTexParameterIuiv = Load<DelegateTypes.glTexParameterIuiv>("glTexParameterIuiv");
        glGetTexParameterIiv = Load<DelegateTypes.glGetTexParameterIiv>("glGetTexParameterIiv");
        glGetTexParameterIuiv = Load<DelegateTypes.glGetTexParameterIuiv>("glGetTexParameterIuiv");
        glClearBufferiv = Load<DelegateTypes.glClearBufferiv>("glClearBufferiv");
        glClearBufferuiv = Load<DelegateTypes.glClearBufferuiv>("glClearBufferuiv");
        glClearBufferfv = Load<DelegateTypes.glClearBufferfv>("glClearBufferfv");
        glClearBufferfi = Load<DelegateTypes.glClearBufferfi>("glClearBufferfi");
        glGetStringi = Load<DelegateTypes.glGetStringi>("glGetStringi");
        glIsRenderbuffer = Load<DelegateTypes.glIsRenderbuffer>("glIsRenderbuffer");
        glBindRenderbuffer = Load<DelegateTypes.glBindRenderbuffer>("glBindRenderbuffer");
        glDeleteRenderbuffers = Load<DelegateTypes.glDeleteRenderbuffers>("glDeleteRenderbuffers");
        glGenRenderbuffers = Load<DelegateTypes.glGenRenderbuffers>("glGenRenderbuffers");
        glRenderbufferStorage = Load<DelegateTypes.glRenderbufferStorage>("glRenderbufferStorage");
        glGetRenderbufferParameteriv = Load<DelegateTypes.glGetRenderbufferParameteriv>("glGetRenderbufferParameteriv");
        glIsFramebuffer = Load<DelegateTypes.glIsFramebuffer>("glIsFramebuffer");
        glBindFramebuffer = Load<DelegateTypes.glBindFramebuffer>("glBindFramebuffer");
        glDeleteFramebuffers = Load<DelegateTypes.glDeleteFramebuffers>("glDeleteFramebuffers");
        glGenFramebuffers = Load<DelegateTypes.glGenFramebuffers>("glGenFramebuffers");
        glCheckFramebufferStatus = Load<DelegateTypes.glCheckFramebufferStatus>("glCheckFramebufferStatus");
        glFramebufferTexture1D = Load<DelegateTypes.glFramebufferTexture1D>("glFramebufferTexture1D");
        glFramebufferTexture2D = Load<DelegateTypes.glFramebufferTexture2D>("glFramebufferTexture2D");
        glFramebufferTexture3D = Load<DelegateTypes.glFramebufferTexture3D>("glFramebufferTexture3D");
        glFramebufferRenderbuffer = Load<DelegateTypes.glFramebufferRenderbuffer>("glFramebufferRenderbuffer");
        glGetFramebufferAttachmentParameteriv = Load<DelegateTypes.glGetFramebufferAttachmentParameteriv>("glGetFramebufferAttachmentParameteriv");
        glGenerateMipmap = Load<DelegateTypes.glGenerateMipmap>("glGenerateMipmap");
        glBlitFramebuffer = Load<DelegateTypes.glBlitFramebuffer>("glBlitFramebuffer");
        glRenderbufferStorageMultisample = Load<DelegateTypes.glRenderbufferStorageMultisample>("glRenderbufferStorageMultisample");
        glFramebufferTextureLayer = Load<DelegateTypes.glFramebufferTextureLayer>("glFramebufferTextureLayer");
        glMapBufferRange = Load<DelegateTypes.glMapBufferRange>("glMapBufferRange");
        glFlushMappedBufferRange = Load<DelegateTypes.glFlushMappedBufferRange>("glFlushMappedBufferRange");
        glBindVertexArray = Load<DelegateTypes.glBindVertexArray>("glBindVertexArray");
        glDeleteVertexArrays = Load<DelegateTypes.glDeleteVertexArrays>("glDeleteVertexArrays");
        glGenVertexArrays = Load<DelegateTypes.glGenVertexArrays>("glGenVertexArrays");
        glIsVertexArray = Load<DelegateTypes.glIsVertexArray>("glIsVertexArray");
        glDrawArraysInstanced = Load<DelegateTypes.glDrawArraysInstanced>("glDrawArraysInstanced");
        glDrawElementsInstanced = Load<DelegateTypes.glDrawElementsInstanced>("glDrawElementsInstanced");
        glTexBuffer = Load<DelegateTypes.glTexBuffer>("glTexBuffer");
        glPrimitiveRestartIndex = Load<DelegateTypes.glPrimitiveRestartIndex>("glPrimitiveRestartIndex");
        glCopyBufferSubData = Load<DelegateTypes.glCopyBufferSubData>("glCopyBufferSubData");
        glGetUniformIndices = Load<DelegateTypes.glGetUniformIndices>("glGetUniformIndices");
        glGetActiveUniformsiv = Load<DelegateTypes.glGetActiveUniformsiv>("glGetActiveUniformsiv");
        glGetActiveUniformName = Load<DelegateTypes.glGetActiveUniformName>("glGetActiveUniformName");
        glGetUniformBlockIndex = Load<DelegateTypes.glGetUniformBlockIndex>("glGetUniformBlockIndex");
        glGetActiveUniformBlockiv = Load<DelegateTypes.glGetActiveUniformBlockiv>("glGetActiveUniformBlockiv");
        glGetActiveUniformBlockName = Load<DelegateTypes.glGetActiveUniformBlockName>("glGetActiveUniformBlockName");
        glUniformBlockBinding = Load<DelegateTypes.glUniformBlockBinding>("glUniformBlockBinding");
        glDrawElementsBaseVertex = Load<DelegateTypes.glDrawElementsBaseVertex>("glDrawElementsBaseVertex");
        glDrawRangeElementsBaseVertex = Load<DelegateTypes.glDrawRangeElementsBaseVertex>("glDrawRangeElementsBaseVertex");
        glDrawElementsInstancedBaseVertex = Load<DelegateTypes.glDrawElementsInstancedBaseVertex>("glDrawElementsInstancedBaseVertex");
        glMultiDrawElementsBaseVertex = Load<DelegateTypes.glMultiDrawElementsBaseVertex>("glMultiDrawElementsBaseVertex");
        glProvokingVertex = Load<DelegateTypes.glProvokingVertex>("glProvokingVertex");
        glFenceSync = Load<DelegateTypes.glFenceSync>("glFenceSync");
        glIsSync = Load<DelegateTypes.glIsSync>("glIsSync");
        glDeleteSync = Load<DelegateTypes.glDeleteSync>("glDeleteSync");
        glClientWaitSync = Load<DelegateTypes.glClientWaitSync>("glClientWaitSync");
        glWaitSync = Load<DelegateTypes.glWaitSync>("glWaitSync");
        glGetInteger64v = Load<DelegateTypes.glGetInteger64v>("glGetInteger64v");
        glGetSynciv = Load<DelegateTypes.glGetSynciv>("glGetSynciv");
        glGetInteger64i_v = Load<DelegateTypes.glGetInteger64i_v>("glGetInteger64i_v");
        glGetBufferParameteri64v = Load<DelegateTypes.glGetBufferParameteri64v>("glGetBufferParameteri64v");
        glFramebufferTexture = Load<DelegateTypes.glFramebufferTexture>("glFramebufferTexture");
        glTexImage2DMultisample = Load<DelegateTypes.glTexImage2DMultisample>("glTexImage2DMultisample");
        glTexImage3DMultisample = Load<DelegateTypes.glTexImage3DMultisample>("glTexImage3DMultisample");
        glGetMultisamplefv = Load<DelegateTypes.glGetMultisamplefv>("glGetMultisamplefv");
        glSampleMaski = Load<DelegateTypes.glSampleMaski>("glSampleMaski");
        glBindFragDataLocationIndexed = Load<DelegateTypes.glBindFragDataLocationIndexed>("glBindFragDataLocationIndexed");
        glGetFragDataIndex = Load<DelegateTypes.glGetFragDataIndex>("glGetFragDataIndex");
        glGenSamplers = Load<DelegateTypes.glGenSamplers>("glGenSamplers");
        glDeleteSamplers = Load<DelegateTypes.glDeleteSamplers>("glDeleteSamplers");
        glIsSampler = Load<DelegateTypes.glIsSampler>("glIsSampler");
        glBindSampler = Load<DelegateTypes.glBindSampler>("glBindSampler");
        glSamplerParameteri = Load<DelegateTypes.glSamplerParameteri>("glSamplerParameteri");
        glSamplerParameteriv = Load<DelegateTypes.glSamplerParameteriv>("glSamplerParameteriv");
        glSamplerParameterf = Load<DelegateTypes.glSamplerParameterf>("glSamplerParameterf");
        glSamplerParameterfv = Load<DelegateTypes.glSamplerParameterfv>("glSamplerParameterfv");
        glSamplerParameterIiv = Load<DelegateTypes.glSamplerParameterIiv>("glSamplerParameterIiv");
        glSamplerParameterIuiv = Load<DelegateTypes.glSamplerParameterIuiv>("glSamplerParameterIuiv");
        glGetSamplerParameteriv = Load<DelegateTypes.glGetSamplerParameteriv>("glGetSamplerParameteriv");
        glGetSamplerParameterIiv = Load<DelegateTypes.glGetSamplerParameterIiv>("glGetSamplerParameterIiv");
        glGetSamplerParameterfv = Load<DelegateTypes.glGetSamplerParameterfv>("glGetSamplerParameterfv");
        glGetSamplerParameterIuiv = Load<DelegateTypes.glGetSamplerParameterIuiv>("glGetSamplerParameterIuiv");
        glQueryCounter = Load<DelegateTypes.glQueryCounter>("glQueryCounter");
        glGetQueryObjecti64v = Load<DelegateTypes.glGetQueryObjecti64v>("glGetQueryObjecti64v");
        glGetQueryObjectui64v = Load<DelegateTypes.glGetQueryObjectui64v>("glGetQueryObjectui64v");
        glVertexAttribDivisor = Load<DelegateTypes.glVertexAttribDivisor>("glVertexAttribDivisor");
        glVertexAttribP1ui = Load<DelegateTypes.glVertexAttribP1ui>("glVertexAttribP1ui");
        glVertexAttribP1uiv = Load<DelegateTypes.glVertexAttribP1uiv>("glVertexAttribP1uiv");
        glVertexAttribP2ui = Load<DelegateTypes.glVertexAttribP2ui>("glVertexAttribP2ui");
        glVertexAttribP2uiv = Load<DelegateTypes.glVertexAttribP2uiv>("glVertexAttribP2uiv");
        glVertexAttribP3ui = Load<DelegateTypes.glVertexAttribP3ui>("glVertexAttribP3ui");
        glVertexAttribP3uiv = Load<DelegateTypes.glVertexAttribP3uiv>("glVertexAttribP3uiv");
        glVertexAttribP4ui = Load<DelegateTypes.glVertexAttribP4ui>("glVertexAttribP4ui");
        glVertexAttribP4uiv = Load<DelegateTypes.glVertexAttribP4uiv>("glVertexAttribP4uiv");
        glVertexP2ui = Load<DelegateTypes.glVertexP2ui>("glVertexP2ui");
        glVertexP2uiv = Load<DelegateTypes.glVertexP2uiv>("glVertexP2uiv");
        glVertexP3ui = Load<DelegateTypes.glVertexP3ui>("glVertexP3ui");
        glVertexP3uiv = Load<DelegateTypes.glVertexP3uiv>("glVertexP3uiv");
        glVertexP4ui = Load<DelegateTypes.glVertexP4ui>("glVertexP4ui");
        glVertexP4uiv = Load<DelegateTypes.glVertexP4uiv>("glVertexP4uiv");
        glTexCoordP1ui = Load<DelegateTypes.glTexCoordP1ui>("glTexCoordP1ui");
        glTexCoordP1uiv = Load<DelegateTypes.glTexCoordP1uiv>("glTexCoordP1uiv");
        glTexCoordP2ui = Load<DelegateTypes.glTexCoordP2ui>("glTexCoordP2ui");
        glTexCoordP2uiv = Load<DelegateTypes.glTexCoordP2uiv>("glTexCoordP2uiv");
        glTexCoordP3ui = Load<DelegateTypes.glTexCoordP3ui>("glTexCoordP3ui");
        glTexCoordP3uiv = Load<DelegateTypes.glTexCoordP3uiv>("glTexCoordP3uiv");
        glTexCoordP4ui = Load<DelegateTypes.glTexCoordP4ui>("glTexCoordP4ui");
        glTexCoordP4uiv = Load<DelegateTypes.glTexCoordP4uiv>("glTexCoordP4uiv");
        glMultiTexCoordP1ui = Load<DelegateTypes.glMultiTexCoordP1ui>("glMultiTexCoordP1ui");
        glMultiTexCoordP1uiv = Load<DelegateTypes.glMultiTexCoordP1uiv>("glMultiTexCoordP1uiv");
        glMultiTexCoordP2ui = Load<DelegateTypes.glMultiTexCoordP2ui>("glMultiTexCoordP2ui");
        glMultiTexCoordP2uiv = Load<DelegateTypes.glMultiTexCoordP2uiv>("glMultiTexCoordP2uiv");
        glMultiTexCoordP3ui = Load<DelegateTypes.glMultiTexCoordP3ui>("glMultiTexCoordP3ui");
        glMultiTexCoordP3uiv = Load<DelegateTypes.glMultiTexCoordP3uiv>("glMultiTexCoordP3uiv");
        glMultiTexCoordP4ui = Load<DelegateTypes.glMultiTexCoordP4ui>("glMultiTexCoordP4ui");
        glMultiTexCoordP4uiv = Load<DelegateTypes.glMultiTexCoordP4uiv>("glMultiTexCoordP4uiv");
        glNormalP3ui = Load<DelegateTypes.glNormalP3ui>("glNormalP3ui");
        glNormalP3uiv = Load<DelegateTypes.glNormalP3uiv>("glNormalP3uiv");
        glColorP3ui = Load<DelegateTypes.glColorP3ui>("glColorP3ui");
        glColorP3uiv = Load<DelegateTypes.glColorP3uiv>("glColorP3uiv");
        glColorP4ui = Load<DelegateTypes.glColorP4ui>("glColorP4ui");
        glColorP4uiv = Load<DelegateTypes.glColorP4uiv>("glColorP4uiv");
        glSecondaryColorP3ui = Load<DelegateTypes.glSecondaryColorP3ui>("glSecondaryColorP3ui");
        glSecondaryColorP3uiv = Load<DelegateTypes.glSecondaryColorP3uiv>("glSecondaryColorP3uiv");
        glDebugMessageControl = Load<DelegateTypes.glDebugMessageControl>("glDebugMessageControl");
        glDebugMessageInsert = Load<DelegateTypes.glDebugMessageInsert>("glDebugMessageInsert");
        glDebugMessageCallback = Load<DelegateTypes.glDebugMessageCallback>("glDebugMessageCallback");
        glGetDebugMessageLog = Load<DelegateTypes.glGetDebugMessageLog>("glGetDebugMessageLog");
        glPushDebugGroup = Load<DelegateTypes.glPushDebugGroup>("glPushDebugGroup");
        glPopDebugGroup = Load<DelegateTypes.glPopDebugGroup>("glPopDebugGroup");
        glObjectLabel = Load<DelegateTypes.glObjectLabel>("glObjectLabel");
        glGetObjectLabel = Load<DelegateTypes.glGetObjectLabel>("glGetObjectLabel");
        glObjectPtrLabel = Load<DelegateTypes.glObjectPtrLabel>("glObjectPtrLabel");
        glGetObjectPtrLabel = Load<DelegateTypes.glGetObjectPtrLabel>("glGetObjectPtrLabel");
        glGetPointerv = Load<DelegateTypes.glGetPointerv>("glGetPointerv");
    }

    public static class DelegateTypes
    {
        public delegate void glCullFace(CullFaceMode mode);
        public delegate void glFrontFace(FrontFaceDirection mode);
        public delegate void glHint(HintTarget target, HintMode mode);
        public delegate void glLineWidth(float width);
        public delegate void glPointSize(float size);
        public delegate void glPolygonMode(MaterialFace face, PolygonMode mode);
        public delegate void glScissor(int x, int y, int width, int height);
        public delegate void glTexParameterf(TextureTarget target, TextureParameterName pname, float param);
        public delegate void glTexParameterfv(TextureTarget target, TextureParameterName pname, /*const*/ float[] @params);
        public delegate void glTexParameteri(TextureTarget target, TextureParameterName pname, int param);
        public delegate void glTexParameteriv(TextureTarget target, TextureParameterName pname, /*const*/ int[] @params);
        public delegate void glTexImage1D(TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, /*const*/ IntPtr pixels);
        public delegate void glTexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, /*const*/ IntPtr pixels);
        public delegate void glDrawBuffer(DrawBufferMode buf);
        public delegate void glClear(GLenum mask);
        public delegate void glClearColor(float red, float green, float blue, float alpha);
        public delegate void glClearStencil(int s);
        public delegate void glClearDepth(double depth);
        public delegate void glStencilMask(uint mask);
        public delegate void glColorMask(bool red, bool green, bool blue, bool alpha);
        public delegate void glDepthMask(bool flag);
        public delegate void glDisable(EnableCap cap);
        public delegate void glEnable(EnableCap cap);
        public delegate void glFinish();
        public delegate void glFlush();
        public delegate void glBlendFunc(BlendingFactor sfactor, BlendingFactor dfactor);
        public delegate void glLogicOp(LogicOp opcode);
        public delegate void glStencilFunc(StencilFunction func, int @ref, uint mask);
        public delegate void glStencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
        public delegate void glDepthFunc(DepthFunction func);
        public delegate void glPixelStoref(PixelStoreParameter pname, float param);
        public delegate void glPixelStorei(PixelStoreParameter pname, int param);
        public delegate void glReadBuffer(ReadBufferMode src);
        public delegate void glReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        public delegate void glGetBooleanv(GetPName pname, out bool data);
        public delegate void glGetDoublev(GetPName pname, out double data);
        public delegate ErrorCode glGetError();
        public delegate void glGetFloatv(GetPName pname, out float data);
        public delegate void glGetIntegerv(GetPName pname, out int data);
        public delegate IntPtr glGetString(StringName name);
        public delegate void glGetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels);
        public delegate void glGetTexParameterfv(TextureTarget target, GetTextureParameter pname, out float @params);
        public delegate void glGetTexParameteriv(TextureTarget target, GetTextureParameter pname, out int @params);
        public delegate void glGetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, out float @params);
        public delegate void glGetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, out int @params);
        public delegate bool glIsEnabled(EnableCap cap);
        public delegate void glDepthRange(double n, double f);
        public delegate void glViewport(int x, int y, int width, int height);
        public delegate void glDrawArrays(PrimitiveType mode, int first, int count);
        public delegate void glDrawElements(PrimitiveType mode, int count, DrawElementsType type, /*const*/ IntPtr indices);
        public delegate void glPolygonOffset(float factor, float units);
        public delegate void glCopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border);
        public delegate void glCopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        public delegate void glCopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width);
        public delegate void glCopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        public delegate void glTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, /*const*/ IntPtr pixels);
        public delegate void glTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, /*const*/ IntPtr pixels);
        public delegate void glBindTexture(TextureTarget target, uint texture);
        public delegate void glDeleteTextures(int n, /*const*/ uint[] textures);
        public delegate void glGenTextures(int n, out uint textures);
        public delegate bool glIsTexture(uint texture);
        public delegate void glDrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, /*const*/ IntPtr indices);
        public delegate void glTexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, /*const*/ IntPtr pixels);
        public delegate void glTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, /*const*/ IntPtr pixels);
        public delegate void glCopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        public delegate void glActiveTexture(TextureUnit texture);
        public delegate void glSampleCoverage(float value, bool invert);
        public delegate void glCompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, /*const*/ IntPtr data);
        public delegate void glCompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, /*const*/ IntPtr data);
        public delegate void glCompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, /*const*/ IntPtr data);
        public delegate void glCompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, /*const*/ IntPtr data);
        public delegate void glCompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, /*const*/ IntPtr data);
        public delegate void glCompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, /*const*/ IntPtr data);
        public delegate void glGetCompressedTexImage(TextureTarget target, int level, IntPtr img);
        public delegate void glBlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
        public delegate void glMultiDrawArrays(PrimitiveType mode, /*const*/ int[] first, /*const*/ int[] count, int drawcount);
        public delegate void glMultiDrawElements(PrimitiveType mode, /*const*/ int[] count, DrawElementsType type, /*const*/ IntPtr indices, int drawcount);
        public delegate void glPointParameterf(PointParameterNameARB pname, float param);
        public delegate void glPointParameterfv(PointParameterNameARB pname, /*const*/ float[] @params);
        public delegate void glPointParameteri(PointParameterNameARB pname, int param);
        public delegate void glPointParameteriv(PointParameterNameARB pname, /*const*/ int[] @params);
        public delegate void glBlendColor(float red, float green, float blue, float alpha);
        public delegate void glBlendEquation(BlendEquationModeEXT mode);
        public delegate void glGenQueries(int n, out uint ids);
        public delegate void glDeleteQueries(int n, /*const*/ uint[] ids);
        public delegate bool glIsQuery(uint id);
        public delegate void glBeginQuery(QueryTarget target, uint id);
        public delegate void glEndQuery(QueryTarget target);
        public delegate void glGetQueryiv(QueryTarget target, QueryParameterName pname, out int @params);
        public delegate void glGetQueryObjectiv(uint id, QueryObjectParameterName pname, out int @params);
        public delegate void glGetQueryObjectuiv(uint id, QueryObjectParameterName pname, out uint @params);
        public delegate void glBindBuffer(BufferTargetARB target, uint buffer);
        public delegate void glDeleteBuffers(int n, /*const*/ uint[] buffers);
        public delegate void glGenBuffers(int n, out uint buffers);
        public delegate bool glIsBuffer(uint buffer);
        public delegate void glBufferData(BufferTargetARB target, IntPtr size, /*const*/ IntPtr data, BufferUsageARB usage);
        public delegate void glBufferSubData(BufferTargetARB target, IntPtr offset, IntPtr size, /*const*/ IntPtr data);
        public delegate void glGetBufferSubData(BufferTargetARB target, IntPtr offset, IntPtr size, IntPtr data);
        public delegate IntPtr glMapBuffer(BufferTargetARB target, BufferAccessARB access);
        public delegate bool glUnmapBuffer(BufferTargetARB target);
        public delegate void glGetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, out int @params);
        public delegate void glGetBufferPointerv(BufferTargetARB target, BufferPointerNameARB pname, IntPtr @params);
        public delegate void glBlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        public delegate void glDrawBuffers(int n, /*const*/ IntPtr bufs);
        public delegate void glStencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        public delegate void glStencilFuncSeparate(StencilFaceDirection face, StencilFunction func, int @ref, uint mask);
        public delegate void glStencilMaskSeparate(StencilFaceDirection face, uint mask);
        public delegate void glAttachShader(uint program, uint shader);
        public delegate void glBindAttribLocation(uint program, uint index, /*const*/ string name);
        public delegate void glCompileShader(uint shader);
        public delegate uint glCreateProgram();
        public delegate uint glCreateShader(ShaderType type);
        public delegate void glDeleteProgram(uint program);
        public delegate void glDeleteShader(uint shader);
        public delegate void glDetachShader(uint program, uint shader);
        public delegate void glDisableVertexAttribArray(uint index);
        public delegate void glEnableVertexAttribArray(uint index);
        public delegate void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, IntPtr type, StringBuilder name);
        public delegate void glGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, IntPtr type, StringBuilder name);
        public delegate void glGetAttachedShaders(uint program, int maxCount, out int count, out uint shaders);
        public delegate int glGetAttribLocation(uint program, /*const*/ string name);
        public delegate void glGetProgramiv(uint program, ProgramPropertyARB pname, out int @params);
        public delegate void glGetProgramInfoLog(uint program, int bufSize, out int length, StringBuilder infoLog);
        public delegate void glGetShaderiv(uint shader, ShaderParameterName pname, out int @params);
        public delegate void glGetShaderInfoLog(uint shader, int bufSize, out int length, StringBuilder infoLog);
        public delegate void glGetShaderSource(uint shader, int bufSize, out int length, StringBuilder source);
        public delegate int glGetUniformLocation(uint program, /*const*/ string name);
        public delegate void glGetUniformfv(uint program, int location, out float @params);
        public delegate void glGetUniformiv(uint program, int location, out int @params);
        public delegate void glGetVertexAttribdv(uint index, VertexAttribPropertyARB pname, out double @params);
        public delegate void glGetVertexAttribfv(uint index, VertexAttribPropertyARB pname, out float @params);
        public delegate void glGetVertexAttribiv(uint index, VertexAttribPropertyARB pname, out int @params);
        public delegate void glGetVertexAttribPointerv(uint index, VertexAttribPointerPropertyARB pname, IntPtr pointer);
        public delegate bool glIsProgram(uint program);
        public delegate bool glIsShader(uint shader);
        public delegate void glLinkProgram(uint program);
        public delegate void glShaderSource(uint shader, int count, /*const*/ string[] @string, /*const*/ int[] length);
        public delegate void glUseProgram(uint program);
        public delegate void glUniform1f(int location, float v0);
        public delegate void glUniform2f(int location, float v0, float v1);
        public delegate void glUniform3f(int location, float v0, float v1, float v2);
        public delegate void glUniform4f(int location, float v0, float v1, float v2, float v3);
        public delegate void glUniform1i(int location, int v0);
        public delegate void glUniform2i(int location, int v0, int v1);
        public delegate void glUniform3i(int location, int v0, int v1, int v2);
        public delegate void glUniform4i(int location, int v0, int v1, int v2, int v3);
        public delegate void glUniform1fv(int location, int count, /*const*/ float[] value);
        public delegate void glUniform2fv(int location, int count, /*const*/ float[] value);
        public delegate void glUniform3fv(int location, int count, /*const*/ float[] value);
        public delegate void glUniform4fv(int location, int count, /*const*/ float[] value);
        public delegate void glUniform1iv(int location, int count, /*const*/ int[] value);
        public delegate void glUniform2iv(int location, int count, /*const*/ int[] value);
        public delegate void glUniform3iv(int location, int count, /*const*/ int[] value);
        public delegate void glUniform4iv(int location, int count, /*const*/ int[] value);
        public delegate void glUniformMatrix2fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glUniformMatrix3fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glUniformMatrix4fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glValidateProgram(uint program);
        public delegate void glVertexAttrib1d(uint index, double x);
        public delegate void glVertexAttrib1dv(uint index, /*const*/ double[] v);
        public delegate void glVertexAttrib1f(uint index, float x);
        public delegate void glVertexAttrib1fv(uint index, /*const*/ float[] v);
        public delegate void glVertexAttrib1s(uint index, short x);
        public delegate void glVertexAttrib1sv(uint index, /*const*/ short[] v);
        public delegate void glVertexAttrib2d(uint index, double x, double y);
        public delegate void glVertexAttrib2dv(uint index, /*const*/ double[] v);
        public delegate void glVertexAttrib2f(uint index, float x, float y);
        public delegate void glVertexAttrib2fv(uint index, /*const*/ float[] v);
        public delegate void glVertexAttrib2s(uint index, short x, short y);
        public delegate void glVertexAttrib2sv(uint index, /*const*/ short[] v);
        public delegate void glVertexAttrib3d(uint index, double x, double y, double z);
        public delegate void glVertexAttrib3dv(uint index, /*const*/ double[] v);
        public delegate void glVertexAttrib3f(uint index, float x, float y, float z);
        public delegate void glVertexAttrib3fv(uint index, /*const*/ float[] v);
        public delegate void glVertexAttrib3s(uint index, short x, short y, short z);
        public delegate void glVertexAttrib3sv(uint index, /*const*/ short[] v);
        public delegate void glVertexAttrib4Nbv(uint index, /*const*/ sbyte[] v);
        public delegate void glVertexAttrib4Niv(uint index, /*const*/ int[] v);
        public delegate void glVertexAttrib4Nsv(uint index, /*const*/ short[] v);
        public delegate void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
        public delegate void glVertexAttrib4Nubv(uint index, /*const*/ byte[] v);
        public delegate void glVertexAttrib4Nuiv(uint index, /*const*/ uint[] v);
        public delegate void glVertexAttrib4Nusv(uint index, /*const*/ ushort[] v);
        public delegate void glVertexAttrib4bv(uint index, /*const*/ sbyte[] v);
        public delegate void glVertexAttrib4d(uint index, double x, double y, double z, double w);
        public delegate void glVertexAttrib4dv(uint index, /*const*/ double[] v);
        public delegate void glVertexAttrib4f(uint index, float x, float y, float z, float w);
        public delegate void glVertexAttrib4fv(uint index, /*const*/ float[] v);
        public delegate void glVertexAttrib4iv(uint index, /*const*/ int[] v);
        public delegate void glVertexAttrib4s(uint index, short x, short y, short z, short w);
        public delegate void glVertexAttrib4sv(uint index, /*const*/ short[] v);
        public delegate void glVertexAttrib4ubv(uint index, /*const*/ byte[] v);
        public delegate void glVertexAttrib4uiv(uint index, /*const*/ uint[] v);
        public delegate void glVertexAttrib4usv(uint index, /*const*/ ushort[] v);
        public delegate void glVertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, /*const*/ IntPtr pointer);
        public delegate void glUniformMatrix2x3fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glUniformMatrix3x2fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glUniformMatrix2x4fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glUniformMatrix4x2fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glUniformMatrix3x4fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glUniformMatrix4x3fv(int location, int count, bool transpose, /*const*/ float[] value);
        public delegate void glColorMaski(uint index, bool r, bool g, bool b, bool a);
        public delegate void glGetBooleani_v(BufferTargetARB target, uint index, out bool data);
        public delegate void glGetIntegeri_v(GetPName target, uint index, out int data);
        public delegate void glEnablei(EnableCap target, uint index);
        public delegate void glDisablei(EnableCap target, uint index);
        public delegate bool glIsEnabledi(EnableCap target, uint index);
        public delegate void glBeginTransformFeedback(PrimitiveType primitiveMode);
        public delegate void glEndTransformFeedback();
        public delegate void glBindBufferRange(BufferTargetARB target, uint index, uint buffer, IntPtr offset, IntPtr size);
        public delegate void glBindBufferBase(BufferTargetARB target, uint index, uint buffer);
        public delegate void glTransformFeedbackVaryings(uint program, int count, /*const*/ string[] varyings, TransformFeedbackBufferMode bufferMode);
        public delegate void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, IntPtr type, StringBuilder name);
        public delegate void glClampColor(ClampColorTargetARB target, ClampColorModeARB clamp);
        public delegate void glBeginConditionalRender(uint id, ConditionalRenderMode mode);
        public delegate void glEndConditionalRender();
        public delegate void glVertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, /*const*/ IntPtr pointer);
        public delegate void glGetVertexAttribIiv(uint index, VertexAttribEnum pname, out int @params);
        public delegate void glGetVertexAttribIuiv(uint index, VertexAttribEnum pname, out uint @params);
        public delegate void glVertexAttribI1i(uint index, int x);
        public delegate void glVertexAttribI2i(uint index, int x, int y);
        public delegate void glVertexAttribI3i(uint index, int x, int y, int z);
        public delegate void glVertexAttribI4i(uint index, int x, int y, int z, int w);
        public delegate void glVertexAttribI1ui(uint index, uint x);
        public delegate void glVertexAttribI2ui(uint index, uint x, uint y);
        public delegate void glVertexAttribI3ui(uint index, uint x, uint y, uint z);
        public delegate void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
        public delegate void glVertexAttribI1iv(uint index, /*const*/ int[] v);
        public delegate void glVertexAttribI2iv(uint index, /*const*/ int[] v);
        public delegate void glVertexAttribI3iv(uint index, /*const*/ int[] v);
        public delegate void glVertexAttribI4iv(uint index, /*const*/ int[] v);
        public delegate void glVertexAttribI1uiv(uint index, /*const*/ uint[] v);
        public delegate void glVertexAttribI2uiv(uint index, /*const*/ uint[] v);
        public delegate void glVertexAttribI3uiv(uint index, /*const*/ uint[] v);
        public delegate void glVertexAttribI4uiv(uint index, /*const*/ uint[] v);
        public delegate void glVertexAttribI4bv(uint index, /*const*/ sbyte[] v);
        public delegate void glVertexAttribI4sv(uint index, /*const*/ short[] v);
        public delegate void glVertexAttribI4ubv(uint index, /*const*/ byte[] v);
        public delegate void glVertexAttribI4usv(uint index, /*const*/ ushort[] v);
        public delegate void glGetUniformuiv(uint program, int location, out uint @params);
        public delegate void glBindFragDataLocation(uint program, uint color, /*const*/ string name);
        public delegate int glGetFragDataLocation(uint program, /*const*/ string name);
        public delegate void glUniform1ui(int location, uint v0);
        public delegate void glUniform2ui(int location, uint v0, uint v1);
        public delegate void glUniform3ui(int location, uint v0, uint v1, uint v2);
        public delegate void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
        public delegate void glUniform1uiv(int location, int count, /*const*/ uint[] value);
        public delegate void glUniform2uiv(int location, int count, /*const*/ uint[] value);
        public delegate void glUniform3uiv(int location, int count, /*const*/ uint[] value);
        public delegate void glUniform4uiv(int location, int count, /*const*/ uint[] value);
        public delegate void glTexParameterIiv(TextureTarget target, TextureParameterName pname, /*const*/ int[] @params);
        public delegate void glTexParameterIuiv(TextureTarget target, TextureParameterName pname, /*const*/ uint[] @params);
        public delegate void glGetTexParameterIiv(TextureTarget target, GetTextureParameter pname, out int @params);
        public delegate void glGetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, out uint @params);
        public delegate void glClearBufferiv(Buffer buffer, int drawbuffer, /*const*/ int[] value);
        public delegate void glClearBufferuiv(Buffer buffer, int drawbuffer, /*const*/ uint[] value);
        public delegate void glClearBufferfv(Buffer buffer, int drawbuffer, /*const*/ float[] value);
        public delegate void glClearBufferfi(Buffer buffer, int drawbuffer, float depth, int stencil);
        public delegate IntPtr glGetStringi(StringName name, uint index);
        public delegate bool glIsRenderbuffer(uint renderbuffer);
        public delegate void glBindRenderbuffer(RenderbufferTarget target, uint renderbuffer);
        public delegate void glDeleteRenderbuffers(int n, /*const*/ uint[] renderbuffers);
        public delegate void glGenRenderbuffers(int n, out uint renderbuffers);
        public delegate void glRenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, int width, int height);
        public delegate void glGetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, out int @params);
        public delegate bool glIsFramebuffer(uint framebuffer);
        public delegate void glBindFramebuffer(FramebufferTarget target, uint framebuffer);
        public delegate void glDeleteFramebuffers(int n, /*const*/ uint[] framebuffers);
        public delegate void glGenFramebuffers(int n, out uint framebuffers);
        public delegate FramebufferStatus glCheckFramebufferStatus(FramebufferTarget target);
        public delegate void glFramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        public delegate void glFramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        public delegate void glFramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);
        public delegate void glFramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        public delegate void glGetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int @params);
        public delegate void glGenerateMipmap(TextureTarget target);
        public delegate void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, GLenum mask, BlitFramebufferFilter filter);
        public delegate void glRenderbufferStorageMultisample(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height);
        public delegate void glFramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);
        public delegate IntPtr glMapBufferRange(BufferTargetARB target, IntPtr offset, IntPtr length, GLenum access);
        public delegate void glFlushMappedBufferRange(BufferTargetARB target, IntPtr offset, IntPtr length);
        public delegate void glBindVertexArray(uint array);
        public delegate void glDeleteVertexArrays(int n, /*const*/ uint[] arrays);
        public delegate void glGenVertexArrays(int n, out uint arrays);
        public delegate bool glIsVertexArray(uint array);
        public delegate void glDrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount);
        public delegate void glDrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, /*const*/ IntPtr indices, int instancecount);
        public delegate void glTexBuffer(TextureTarget target, SizedInternalFormat internalformat, uint buffer);
        public delegate void glPrimitiveRestartIndex(uint index);
        public delegate void glCopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        public delegate void glGetUniformIndices(uint program, int uniformCount, /*const*/ string[] uniformNames, out uint uniformIndices);
        public delegate void glGetActiveUniformsiv(uint program, int uniformCount, /*const*/ uint[] uniformIndices, UniformPName pname, out int @params);
        public delegate void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, StringBuilder uniformName);
        public delegate uint glGetUniformBlockIndex(uint program, /*const*/ string uniformBlockName);
        public delegate void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, UniformBlockPName pname, out int @params);
        public delegate void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, StringBuilder uniformBlockName);
        public delegate void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        public delegate void glDrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, /*const*/ IntPtr indices, int basevertex);
        public delegate void glDrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, /*const*/ IntPtr indices, int basevertex);
        public delegate void glDrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, /*const*/ IntPtr indices, int instancecount, int basevertex);
        public delegate void glMultiDrawElementsBaseVertex(PrimitiveType mode, /*const*/ int[] count, DrawElementsType type, /*const*/ IntPtr indices, int drawcount, /*const*/ int[] basevertex);
        public delegate void glProvokingVertex(VertexProvokingMode mode);
        public delegate IntPtr glFenceSync(SyncCondition condition, GLenum flags);
        public delegate bool glIsSync(IntPtr sync);
        public delegate void glDeleteSync(IntPtr sync);
        public delegate SyncStatus glClientWaitSync(IntPtr sync, GLenum flags, ulong timeout);
        public delegate void glWaitSync(IntPtr sync, GLenum flags, ulong timeout);
        public delegate void glGetInteger64v(GetPName pname, out long data);
        public delegate void glGetSynciv(IntPtr sync, SyncParameterName pname, int count, out int length, out int values);
        public delegate void glGetInteger64i_v(GetPName target, uint index, out long data);
        public delegate void glGetBufferParameteri64v(BufferTargetARB target, BufferPNameARB pname, out long @params);
        public delegate void glFramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);
        public delegate void glTexImage2DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        public delegate void glTexImage3DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        public delegate void glGetMultisamplefv(GetMultisamplePNameNV pname, uint index, out float val);
        public delegate void glSampleMaski(uint maskNumber, GLenum mask);
        public delegate void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, /*const*/ string name);
        public delegate int glGetFragDataIndex(uint program, /*const*/ string name);
        public delegate void glGenSamplers(int count, out uint samplers);
        public delegate void glDeleteSamplers(int count, /*const*/ uint[] samplers);
        public delegate bool glIsSampler(uint sampler);
        public delegate void glBindSampler(uint unit, uint sampler);
        public delegate void glSamplerParameteri(uint sampler, SamplerParameterI pname, int param);
        public delegate void glSamplerParameteriv(uint sampler, SamplerParameterI pname, /*const*/ int[] param);
        public delegate void glSamplerParameterf(uint sampler, SamplerParameterF pname, float param);
        public delegate void glSamplerParameterfv(uint sampler, SamplerParameterF pname, /*const*/ float[] param);
        public delegate void glSamplerParameterIiv(uint sampler, SamplerParameterI pname, /*const*/ int[] param);
        public delegate void glSamplerParameterIuiv(uint sampler, SamplerParameterI pname, /*const*/ uint[] param);
        public delegate void glGetSamplerParameteriv(uint sampler, SamplerParameterI pname, out int @params);
        public delegate void glGetSamplerParameterIiv(uint sampler, SamplerParameterI pname, out int @params);
        public delegate void glGetSamplerParameterfv(uint sampler, SamplerParameterF pname, out float @params);
        public delegate void glGetSamplerParameterIuiv(uint sampler, SamplerParameterI pname, out uint @params);
        public delegate void glQueryCounter(uint id, QueryCounterTarget target);
        public delegate void glGetQueryObjecti64v(uint id, QueryObjectParameterName pname, out long @params);
        public delegate void glGetQueryObjectui64v(uint id, QueryObjectParameterName pname, out ulong @params);
        public delegate void glVertexAttribDivisor(uint index, uint divisor);
        public delegate void glVertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        public delegate void glVertexAttribP1uiv(uint index, VertexAttribPointerType type, bool normalized, /*const*/ uint[] value);
        public delegate void glVertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        public delegate void glVertexAttribP2uiv(uint index, VertexAttribPointerType type, bool normalized, /*const*/ uint[] value);
        public delegate void glVertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        public delegate void glVertexAttribP3uiv(uint index, VertexAttribPointerType type, bool normalized, /*const*/ uint[] value);
        public delegate void glVertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        public delegate void glVertexAttribP4uiv(uint index, VertexAttribPointerType type, bool normalized, /*const*/ uint[] value);
        public delegate void glVertexP2ui(VertexPointerType type, uint value);
        public delegate void glVertexP2uiv(VertexPointerType type, /*const*/ uint[] value);
        public delegate void glVertexP3ui(VertexPointerType type, uint value);
        public delegate void glVertexP3uiv(VertexPointerType type, /*const*/ uint[] value);
        public delegate void glVertexP4ui(VertexPointerType type, uint value);
        public delegate void glVertexP4uiv(VertexPointerType type, /*const*/ uint[] value);
        public delegate void glTexCoordP1ui(TexCoordPointerType type, uint coords);
        public delegate void glTexCoordP1uiv(TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glTexCoordP2ui(TexCoordPointerType type, uint coords);
        public delegate void glTexCoordP2uiv(TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glTexCoordP3ui(TexCoordPointerType type, uint coords);
        public delegate void glTexCoordP3uiv(TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glTexCoordP4ui(TexCoordPointerType type, uint coords);
        public delegate void glTexCoordP4uiv(TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glMultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        public delegate void glMultiTexCoordP1uiv(TextureUnit texture, TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glMultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        public delegate void glMultiTexCoordP2uiv(TextureUnit texture, TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glMultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        public delegate void glMultiTexCoordP3uiv(TextureUnit texture, TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glMultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        public delegate void glMultiTexCoordP4uiv(TextureUnit texture, TexCoordPointerType type, /*const*/ uint[] coords);
        public delegate void glNormalP3ui(NormalPointerType type, uint coords);
        public delegate void glNormalP3uiv(NormalPointerType type, /*const*/ uint[] coords);
        public delegate void glColorP3ui(ColorPointerType type, uint color);
        public delegate void glColorP3uiv(ColorPointerType type, /*const*/ uint[] color);
        public delegate void glColorP4ui(ColorPointerType type, uint color);
        public delegate void glColorP4uiv(ColorPointerType type, /*const*/ uint[] color);
        public delegate void glSecondaryColorP3ui(ColorPointerType type, uint color);
        public delegate void glSecondaryColorP3uiv(ColorPointerType type, /*const*/ uint[] color);
        public delegate void glDebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, /*const*/ uint[] ids, bool enabled);
        public delegate void glDebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, /*const*/ string buf);
        public delegate void glDebugMessageCallback([MarshalAs(UnmanagedType.FunctionPtr)] DebugCallback callback, /*const*/ IntPtr userParam);
        public delegate uint glGetDebugMessageLog(uint count, int bufSize, IntPtr sources, IntPtr types, out uint ids, IntPtr severities, out int lengths, StringBuilder messageLog);
        public delegate void glPushDebugGroup(DebugSource source, uint id, int length, /*const*/ string message);
        public delegate void glPopDebugGroup();
        public delegate void glObjectLabel(ObjectIdentifier identifier, uint name, int length, /*const*/ string label);
        public delegate void glGetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length, StringBuilder label);
        public delegate void glObjectPtrLabel(/*const*/ IntPtr ptr, int length, /*const*/ string label);
        public delegate void glGetObjectPtrLabel(/*const*/ IntPtr ptr, int bufSize, out int length, StringBuilder label);
        public delegate void glGetPointerv(GetPointervPName pname, IntPtr @params);
    }
}
